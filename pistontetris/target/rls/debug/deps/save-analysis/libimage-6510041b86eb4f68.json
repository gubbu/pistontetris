{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1","program":"C:\\Users\\Zimmerle\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","image","C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"bmp\"","--cfg","feature=\"default\"","--cfg","feature=\"dxt\"","--cfg","feature=\"gif\"","--cfg","feature=\"gif_codec\"","--cfg","feature=\"hdr\"","--cfg","feature=\"ico\"","--cfg","feature=\"jpeg\"","--cfg","feature=\"jpeg-decoder\"","--cfg","feature=\"jpeg_rayon\"","--cfg","feature=\"png\"","--cfg","feature=\"png_codec\"","--cfg","feature=\"pnm\"","--cfg","feature=\"scoped_threadpool\"","--cfg","feature=\"tga\"","--cfg","feature=\"tiff\"","--cfg","feature=\"webp\"","-C","metadata=6510041b86eb4f68","-C","extra-filename=-6510041b86eb4f68","--out-dir","e:\\SIMON\\Dokumente\\Programieren\\rust\\games\\pistontetris\\pistontetris\\pistontetris\\target\\rls\\debug\\deps","-L","dependency=e:\\SIMON\\Dokumente\\Programieren\\rust\\games\\pistontetris\\pistontetris\\pistontetris\\target\\rls\\debug\\deps","--extern","byteorder=e:\\SIMON\\Dokumente\\Programieren\\rust\\games\\pistontetris\\pistontetris\\pistontetris\\target\\rls\\debug\\deps\\libbyteorder-2f9f53e4e1bd4873.rmeta","--extern","gif=e:\\SIMON\\Dokumente\\Programieren\\rust\\games\\pistontetris\\pistontetris\\pistontetris\\target\\rls\\debug\\deps\\libgif-d8bf0f583beeaf53.rmeta","--extern","jpeg_decoder=e:\\SIMON\\Dokumente\\Programieren\\rust\\games\\pistontetris\\pistontetris\\pistontetris\\target\\rls\\debug\\deps\\libjpeg_decoder-cb8b7f53509d8873.rmeta","--extern","lzw=e:\\SIMON\\Dokumente\\Programieren\\rust\\games\\pistontetris\\pistontetris\\pistontetris\\target\\rls\\debug\\deps\\liblzw-5c926720d2bbdc38.rmeta","--extern","num_iter=e:\\SIMON\\Dokumente\\Programieren\\rust\\games\\pistontetris\\pistontetris\\pistontetris\\target\\rls\\debug\\deps\\libnum_iter-89e403f8bca9c8a8.rmeta","--extern","num_rational=e:\\SIMON\\Dokumente\\Programieren\\rust\\games\\pistontetris\\pistontetris\\pistontetris\\target\\rls\\debug\\deps\\libnum_rational-f43340013d1a413a.rmeta","--extern","num_traits=e:\\SIMON\\Dokumente\\Programieren\\rust\\games\\pistontetris\\pistontetris\\pistontetris\\target\\rls\\debug\\deps\\libnum_traits-17b2fe075ebca268.rmeta","--extern","png=e:\\SIMON\\Dokumente\\Programieren\\rust\\games\\pistontetris\\pistontetris\\pistontetris\\target\\rls\\debug\\deps\\libpng-e07c88ce34a5616e.rmeta","--extern","scoped_threadpool=e:\\SIMON\\Dokumente\\Programieren\\rust\\games\\pistontetris\\pistontetris\\pistontetris\\target\\rls\\debug\\deps\\libscoped_threadpool-703be001ed922d2d.rmeta","--extern","tiff=e:\\SIMON\\Dokumente\\Programieren\\rust\\games\\pistontetris\\pistontetris\\pistontetris\\target\\rls\\debug\\deps\\libtiff-ccb1e30842026768.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Zimmerle\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"e:\\SIMON\\Dokumente\\Programieren\\rust\\games\\pistontetris\\pistontetris\\pistontetris\\target\\rls\\debug\\deps\\libimage-6510041b86eb4f68.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[1625120235867707713,15494544072871839705]},"crate_root":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src","external_crates":[{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[13454279496936976369,256594374343364064]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10635428080862470944,4053010167158610789]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2397070696586021034,1787692942867494326]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13215350897914660053,4762041400992555299]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8309206586370028958,10530789326598529563]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12844497061290288730,1165546255938205329]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17370511097861102976,8088456066398622915]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":8,"id":{"name":"hashbrown","disambiguator":[1985867887572050615,3717448080532913995]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":9,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10045986561377339069,14963295625130836827]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14681916437073319406,9740076823699971540]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":11,"id":{"name":"panic_unwind","disambiguator":[4514194809136982995,14217700833302823945]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":12,"id":{"name":"byteorder","disambiguator":[1668327077863490874,9058268309931896717]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":13,"id":{"name":"lzw","disambiguator":[11072124648758347227,2603613596591555487]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":14,"id":{"name":"num_iter","disambiguator":[13228955595893315999,3461997092660677919]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":15,"id":{"name":"num_integer","disambiguator":[14710328560407668197,12169722844115580149]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":16,"id":{"name":"num_traits","disambiguator":[250909729605178667,7471714309434053556]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":17,"id":{"name":"num_rational","disambiguator":[13563687780259655390,10710404052673125328]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","num":18,"id":{"name":"scoped_threadpool","disambiguator":[15370546160736803880,12678354831568429377]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","num":19,"id":{"name":"gif","disambiguator":[16285489705509875584,10414118536536380878]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","num":20,"id":{"name":"color_quant","disambiguator":[18256317457134568560,14063439599714271654]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":21,"id":{"name":"jpeg_decoder","disambiguator":[8581184792985461428,6751177563958537120]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":22,"id":{"name":"rayon","disambiguator":[4907557082229767674,6984373511525713763]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":23,"id":{"name":"crossbeam_deque","disambiguator":[13204853999374946674,9291484611669670602]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":24,"id":{"name":"crossbeam_epoch","disambiguator":[5437111178761086376,18398099151858053802]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","num":25,"id":{"name":"cfg_if","disambiguator":[9892403052926457981,12199495752406605354]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":26,"id":{"name":"arrayvec","disambiguator":[9742200224502025928,1665981593285059283]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":27,"id":{"name":"nodrop","disambiguator":[3731771727497719198,13489708442398182793]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":28,"id":{"name":"crossbeam_utils","disambiguator":[13328241532570596262,1407893011031932723]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":29,"id":{"name":"lazy_static","disambiguator":[8311875922454522998,15465922901661398489]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":30,"id":{"name":"memoffset","disambiguator":[736243595676418036,1126588728772268113]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":31,"id":{"name":"scopeguard","disambiguator":[14116879031634278910,16025134346367935318]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":32,"id":{"name":"either","disambiguator":[4442650862764834147,11612143026168459370]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":33,"id":{"name":"rayon_core","disambiguator":[15810427790255556756,3291947618133498797]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":34,"id":{"name":"crossbeam_queue","disambiguator":[6874646197853042720,11405169212682829833]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","num":35,"id":{"name":"num_cpus","disambiguator":[1454782163737823092,15506429651928045942]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","num":36,"id":{"name":"png","disambiguator":[10141915080833794384,5329488927443650370]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","num":37,"id":{"name":"bitflags","disambiguator":[6937954323304495786,2197167237398696611]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","num":38,"id":{"name":"crc32fast","disambiguator":[7654382182217637427,10458207472404790657]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","num":39,"id":{"name":"inflate","disambiguator":[4470378589828397696,17671280023416727570]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","num":40,"id":{"name":"adler32","disambiguator":[18137745604133793444,16513405588016738949]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","num":41,"id":{"name":"deflate","disambiguator":[4886713794450822084,3987702675738026645]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","num":42,"id":{"name":"tiff","disambiguator":[13726627462372618277,2034618016489155273]}},{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","num":43,"id":{"name":"num_derive","disambiguator":[1152839370866248097,9181203274150890892]}}],"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":0,"byte_end":3412,"line_start":1,"line_end":138,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":3650},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":729,"byte_end":733,"line_start":28,"line_end":28,"column_start":28,"column_end":32},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3651},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":735,"byte_end":739,"line_start":28,"line_end":28,"column_start":34,"column_end":38},"alias_span":null,"name":"Gray","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3660},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":741,"byte_end":746,"line_start":28,"line_end":28,"column_start":40,"column_end":45},"alias_span":null,"name":"GrayA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3657},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":748,"byte_end":755,"line_start":28,"line_end":28,"column_start":47,"column_end":54},"alias_span":null,"name":"Palette","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3654},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":757,"byte_end":760,"line_start":28,"line_end":28,"column_start":56,"column_end":59},"alias_span":null,"name":"RGB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3663},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":762,"byte_end":766,"line_start":28,"line_end":28,"column_start":61,"column_end":65},"alias_span":null,"name":"RGBA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3666},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":768,"byte_end":771,"line_start":28,"line_end":28,"column_start":67,"column_end":70},"alias_span":null,"name":"BGR","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3669},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":773,"byte_end":777,"line_start":28,"line_end":28,"column_start":72,"column_end":76},"alias_span":null,"name":"BGRA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3987},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":797,"byte_end":801,"line_start":30,"line_end":30,"column_start":17,"column_end":21},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4062},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":803,"byte_end":808,"line_start":30,"line_end":30,"column_start":23,"column_end":28},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3937},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":810,"byte_end":813,"line_start":30,"line_end":30,"column_start":30,"column_end":33},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4012},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":815,"byte_end":819,"line_start":30,"line_end":30,"column_start":35,"column_end":39},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3962},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":821,"byte_end":824,"line_start":30,"line_end":30,"column_start":41,"column_end":44},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4037},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":826,"byte_end":830,"line_start":30,"line_end":30,"column_start":46,"column_end":50},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2902},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":850,"byte_end":866,"line_start":32,"line_end":32,"column_start":17,"column_end":33},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2931},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":884,"byte_end":896,"line_start":33,"line_end":33,"column_start":17,"column_end":29},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2918},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":914,"byte_end":930,"line_start":34,"line_end":34,"column_start":17,"column_end":33},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2883},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":948,"byte_end":960,"line_start":35,"line_end":35,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2896},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":978,"byte_end":993,"line_start":36,"line_end":36,"column_start":17,"column_end":32},"alias_span":null,"name":"ImageDecoderExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4108},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1011,"byte_end":1021,"line_start":37,"line_end":37,"column_start":17,"column_end":27},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2862},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1039,"byte_end":1050,"line_start":38,"line_end":38,"column_start":17,"column_end":28},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2905},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1097,"byte_end":1103,"line_start":40,"line_end":40,"column_start":17,"column_end":23},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2941},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1121,"byte_end":1129,"line_start":41,"line_end":41,"column_start":17,"column_end":25},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3032},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1164,"byte_end":1168,"line_start":43,"line_end":43,"column_start":32,"column_end":36},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3037},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1170,"byte_end":1180,"line_start":43,"line_end":43,"column_start":38,"column_end":48},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3039},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1182,"byte_end":1190,"line_start":43,"line_end":43,"column_start":50,"column_end":58},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3041},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1192,"byte_end":1200,"line_start":43,"line_end":43,"column_start":60,"column_end":68},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3033},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1202,"byte_end":1209,"line_start":43,"line_end":43,"column_start":70,"column_end":77},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3035},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1211,"byte_end":1219,"line_start":43,"line_end":43,"column_start":79,"column_end":87},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4131},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1252,"byte_end":1256,"line_start":45,"line_end":45,"column_start":30,"column_end":34},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4146},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1258,"byte_end":1261,"line_start":45,"line_end":45,"column_start":36,"column_end":39},"alias_span":null,"name":"BMP","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4136},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1263,"byte_end":1266,"line_start":45,"line_end":45,"column_start":41,"column_end":44},"alias_span":null,"name":"GIF","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4148},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1268,"byte_end":1271,"line_start":45,"line_end":45,"column_start":46,"column_end":49},"alias_span":null,"name":"ICO","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4134},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1273,"byte_end":1277,"line_start":45,"line_end":45,"column_start":51,"column_end":55},"alias_span":null,"name":"JPEG","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4132},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1279,"byte_end":1282,"line_start":45,"line_end":45,"column_start":57,"column_end":60},"alias_span":null,"name":"PNG","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4140},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1284,"byte_end":1287,"line_start":45,"line_end":45,"column_start":62,"column_end":65},"alias_span":null,"name":"PNM","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4138},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1289,"byte_end":1293,"line_start":45,"line_end":45,"column_start":67,"column_end":71},"alias_span":null,"name":"WEBP","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4161},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1312,"byte_end":1329,"line_start":47,"line_end":47,"column_start":16,"column_end":33},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2528},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1349,"byte_end":1362,"line_start":49,"line_end":49,"column_start":18,"column_end":31},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2544},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1381,"byte_end":1395,"line_start":50,"line_end":50,"column_start":18,"column_end":32},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2543},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1414,"byte_end":1423,"line_start":51,"line_end":51,"column_start":18,"column_end":27},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3639},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1474,"byte_end":1485,"line_start":53,"line_end":53,"column_start":18,"column_end":29},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2253},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1504,"byte_end":1509,"line_start":54,"line_end":54,"column_start":18,"column_end":23},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2541},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1528,"byte_end":1536,"line_start":55,"line_end":55,"column_start":18,"column_end":26},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2542},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1555,"byte_end":1564,"line_start":56,"line_end":56,"column_start":18,"column_end":27},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3048},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1583,"byte_end":1594,"line_start":58,"line_end":58,"column_start":16,"column_end":27},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2980},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1624,"byte_end":1633,"line_start":61,"line_end":61,"column_start":17,"column_end":26},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2838},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1685,"byte_end":1697,"line_start":64,"line_end":64,"column_start":20,"column_end":32},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2832},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1699,"byte_end":1703,"line_start":64,"line_end":64,"column_start":34,"column_end":38},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2836},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1705,"byte_end":1721,"line_start":64,"line_end":64,"column_start":40,"column_end":56},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2837},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1723,"byte_end":1751,"line_start":64,"line_end":64,"column_start":58,"column_end":86},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2812},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1753,"byte_end":1757,"line_start":64,"line_end":64,"column_start":88,"column_end":92},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2822},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1778,"byte_end":1789,"line_start":65,"line_end":65,"column_start":20,"column_end":31},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2828},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1791,"byte_end":1814,"line_start":65,"line_end":65,"column_start":33,"column_end":56},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2817},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1816,"byte_end":1832,"line_start":65,"line_end":65,"column_start":58,"column_end":74},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4087},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1869,"byte_end":1873,"line_start":67,"line_end":67,"column_start":34,"column_end":38},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4088},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1875,"byte_end":1885,"line_start":67,"line_end":67,"column_start":40,"column_end":50},"alias_span":null,"name":"ImageLuma8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4091},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1887,"byte_end":1898,"line_start":67,"line_end":67,"column_start":52,"column_end":63},"alias_span":null,"name":"ImageLumaA8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4094},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1900,"byte_end":1909,"line_start":67,"line_end":67,"column_start":65,"column_end":74},"alias_span":null,"name":"ImageRgb8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4097},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1911,"byte_end":1921,"line_start":67,"line_end":67,"column_start":76,"column_end":86},"alias_span":null,"name":"ImageRgba8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4100},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1923,"byte_end":1932,"line_start":67,"line_end":67,"column_start":88,"column_end":97},"alias_span":null,"name":"ImageBgr8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4103},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1934,"byte_end":1944,"line_start":67,"line_end":67,"column_start":99,"column_end":109},"alias_span":null,"name":"ImageBgra8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3632},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1968,"byte_end":1973,"line_start":69,"line_end":69,"column_start":21,"column_end":26},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2199},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":1975,"byte_end":1981,"line_start":69,"line_end":69,"column_start":28,"column_end":34},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3032},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18401,"byte_end":18411,"line_start":8,"line_end":8,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":3037},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18449,"byte_end":18459,"line_start":10,"line_end":10,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":3039},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18461,"byte_end":18469,"line_start":10,"line_end":10,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":3041},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18471,"byte_end":18479,"line_start":10,"line_end":10,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":3033},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18481,"byte_end":18488,"line_start":10,"line_end":10,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":3035},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18490,"byte_end":18498,"line_start":10,"line_end":10,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18552,"byte_end":18567,"line_start":13,"line_end":13,"column_start":24,"column_end":39},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18569,"byte_end":18582,"line_start":13,"line_end":13,"column_start":41,"column_end":54},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18584,"byte_end":18593,"line_start":13,"line_end":13,"column_start":56,"column_end":65},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18595,"byte_end":18604,"line_start":13,"line_end":13,"column_start":67,"column_end":76},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18606,"byte_end":18614,"line_start":13,"line_end":13,"column_start":78,"column_end":86},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18660,"byte_end":18664,"line_start":16,"line_end":16,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18666,"byte_end":18675,"line_start":16,"line_end":16,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18677,"byte_end":18683,"line_start":16,"line_end":16,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18685,"byte_end":18694,"line_start":16,"line_end":16,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18696,"byte_end":18705,"line_start":16,"line_end":16,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18755,"byte_end":18763,"line_start":19,"line_end":19,"column_start":26,"column_end":34},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18765,"byte_end":18773,"line_start":19,"line_end":19,"column_start":36,"column_end":44},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18775,"byte_end":18781,"line_start":19,"line_end":19,"column_start":46,"column_end":52},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18783,"byte_end":18792,"line_start":19,"line_end":19,"column_start":54,"column_end":63},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18794,"byte_end":18803,"line_start":19,"line_end":19,"column_start":65,"column_end":74},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18805,"byte_end":18817,"line_start":19,"line_end":19,"column_start":76,"column_end":88},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18819,"byte_end":18825,"line_start":19,"line_end":19,"column_start":90,"column_end":96},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":3027},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18852,"byte_end":18859,"line_start":20,"line_end":20,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18861,"byte_end":18869,"line_start":20,"line_end":20,"column_start":35,"column_end":43},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":597},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\mod.rs","byte_start":125991,"byte_end":126001,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"BMPDecoder","value":"","parent":{"krate":0,"index":501}},{"kind":"Use","ref_id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\mod.rs","byte_start":126026,"byte_end":126036,"line_start":11,"line_end":11,"column_start":24,"column_end":34},"alias_span":null,"name":"BMPEncoder","value":"","parent":{"krate":0,"index":501}},{"kind":"Use","ref_id":{"krate":19,"index":297},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":215021,"byte_end":215035,"line_start":38,"line_end":38,"column_start":21,"column_end":35},"alias_span":null,"name":"DisposalMethod","value":"","parent":{"krate":0,"index":832}},{"kind":"Use","ref_id":{"krate":19,"index":360},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":215037,"byte_end":215042,"line_start":38,"line_end":38,"column_start":37,"column_end":42},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":832}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\mod.rs","byte_start":225288,"byte_end":225289,"line_start":14,"line_end":14,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"rgbe8, RGBE8Pixel, SIGNATURE, HDRAdapter","parent":{"krate":0,"index":924}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\mod.rs","byte_start":225314,"byte_end":225315,"line_start":15,"line_end":15,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":924}},{"kind":"Use","ref_id":{"krate":0,"index":1153},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\mod.rs","byte_start":273497,"byte_end":273507,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"ICODecoder","value":"","parent":{"krate":0,"index":1128}},{"kind":"Use","ref_id":{"krate":0,"index":1216},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\mod.rs","byte_start":273532,"byte_end":273542,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"ICOEncoder","value":"","parent":{"krate":0,"index":1128}},{"kind":"Use","ref_id":{"krate":0,"index":1245},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\mod.rs","byte_start":286295,"byte_end":286306,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JPEGDecoder","value":"","parent":{"krate":0,"index":1229}},{"kind":"Use","ref_id":{"krate":0,"index":1339},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\mod.rs","byte_start":286331,"byte_end":286342,"line_start":11,"line_end":11,"column_start":24,"column_end":35},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":1229}},{"kind":"Use","ref_id":{"krate":0,"index":1537},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\mod.rs","byte_start":330663,"byte_end":330673,"line_start":7,"line_end":7,"column_start":24,"column_end":34},"alias_span":null,"name":"PNMDecoder","value":"","parent":{"krate":0,"index":1455}},{"kind":"Use","ref_id":{"krate":0,"index":1670},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\mod.rs","byte_start":330698,"byte_end":330708,"line_start":8,"line_end":8,"column_start":24,"column_end":34},"alias_span":null,"name":"PNMEncoder","value":"","parent":{"krate":0,"index":1455}},{"kind":"Use","ref_id":{"krate":0,"index":3453},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\mod.rs","byte_start":330765,"byte_end":330780,"line_start":10,"line_end":10,"column_start":24,"column_end":39},"alias_span":null,"name":"ArbitraryHeader","value":"","parent":{"krate":0,"index":1455}},{"kind":"Use","ref_id":{"krate":0,"index":3463},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\mod.rs","byte_start":330782,"byte_end":330799,"line_start":10,"line_end":10,"column_start":41,"column_end":58},"alias_span":null,"name":"ArbitraryTuplType","value":"","parent":{"krate":0,"index":1455}},{"kind":"Use","ref_id":{"krate":0,"index":3424},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\mod.rs","byte_start":330801,"byte_end":330813,"line_start":10,"line_end":10,"column_start":60,"column_end":72},"alias_span":null,"name":"BitmapHeader","value":"","parent":{"krate":0,"index":1455}},{"kind":"Use","ref_id":{"krate":0,"index":3433},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\mod.rs","byte_start":330815,"byte_end":330828,"line_start":10,"line_end":10,"column_start":74,"column_end":87},"alias_span":null,"name":"GraymapHeader","value":"","parent":{"krate":0,"index":1455}},{"kind":"Use","ref_id":{"krate":0,"index":3443},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\mod.rs","byte_start":330853,"byte_end":330865,"line_start":11,"line_end":11,"column_start":24,"column_end":36},"alias_span":null,"name":"PixmapHeader","value":"","parent":{"krate":0,"index":1455}},{"kind":"Use","ref_id":{"krate":0,"index":1765},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\mod.rs","byte_start":330891,"byte_end":330900,"line_start":12,"line_end":12,"column_start":24,"column_end":33},"alias_span":null,"name":"PNMHeader","value":"","parent":{"krate":0,"index":1455}},{"kind":"Use","ref_id":{"krate":0,"index":3402},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\mod.rs","byte_start":330902,"byte_end":330912,"line_start":12,"line_end":12,"column_start":35,"column_end":45},"alias_span":null,"name":"PNMSubtype","value":"","parent":{"krate":0,"index":1455}},{"kind":"Use","ref_id":{"krate":0,"index":3388},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\mod.rs","byte_start":330914,"byte_end":330928,"line_start":12,"line_end":12,"column_start":47,"column_end":61},"alias_span":null,"name":"SampleEncoding","value":"","parent":{"krate":0,"index":1455}},{"kind":"Use","ref_id":{"krate":0,"index":1858},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\mod.rs","byte_start":409177,"byte_end":409187,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"TGADecoder","value":"","parent":{"krate":0,"index":1803}},{"kind":"Use","ref_id":{"krate":0,"index":1977},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\mod.rs","byte_start":430892,"byte_end":430903,"line_start":3,"line_end":3,"column_start":24,"column_end":35},"alias_span":null,"name":"WebpDecoder","value":"","parent":{"krate":0,"index":1958}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":0,"byte_end":3412,"line_start":1,"line_end":138,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":28},{"krate":0,"index":35},{"krate":0,"index":45},{"krate":0,"index":52},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":82},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":135},{"krate":0,"index":344},{"krate":0,"index":501},{"krate":0,"index":720},{"krate":0,"index":832},{"krate":0,"index":924},{"krate":0,"index":1128},{"krate":0,"index":1229},{"krate":0,"index":1399},{"krate":0,"index":1455},{"krate":0,"index":1803},{"krate":0,"index":1906},{"krate":0,"index":1958},{"krate":0,"index":2194},{"krate":0,"index":2218},{"krate":0,"index":2547},{"krate":0,"index":2696},{"krate":0,"index":2840},{"krate":0,"index":2974},{"krate":0,"index":3002},{"krate":0,"index":3014},{"krate":0,"index":4201},{"krate":0,"index":3015}],"decl_id":null,"docs":" This crate provides native rust implementations of\n image encoders and decoders and basic image manipulation\n functions.\n","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":132,"byte_end":154,"line_start":5,"line_end":5,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":155,"byte_end":186,"line_start":6,"line_end":6,"column_start":1,"column_end":32}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":187,"byte_end":225,"line_start":7,"line_end":7,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\mod.rs","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":132}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\nq.rs","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":3016},{"krate":0,"index":3024},{"krate":0,"index":3022},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":118}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\nq.rs","byte_start":5719,"byte_end":5727,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117}],"decl_id":null,"docs":" Neural network color quantizer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\nq.rs","byte_start":6029,"byte_end":6032,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"fn (samplefac: i32, colors: usize, pixels: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new neural network and trains it with the supplied data\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\nq.rs","byte_start":6573,"byte_end":6577,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"fn (&mut self, pixels: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Initializes the neural network and trains it with the supplied data\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\nq.rs","byte_start":7567,"byte_end":7576,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"fn (&self, pixel: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Maps the pixel in-place to the best-matching color in the color map\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\nq.rs","byte_start":7538,"byte_end":7555,"line_start":122,"line_end":122,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\nq.rs","byte_start":8128,"byte_end":8136,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"fn (&self, pixel: &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the best-matching index in the color map for `pixel`\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\nq.rs","byte_start":8099,"byte_end":8116,"line_start":137,"line_end":137,"column_start":5,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\utils.rs","parent":null,"children":[{"krate":0,"index":133}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\utils.rs","byte_start":18099,"byte_end":18104,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"fn <N> (a: N, min: N, max: N) -> N","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\utils.rs","byte_start":18082,"byte_end":18091,"line_start":12,"line_end":12,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":149},{"krate":0,"index":155},{"krate":0,"index":161},{"krate":0,"index":171},{"krate":0,"index":186},{"krate":0,"index":249},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":341}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\affine.rs","byte_start":25917,"byte_end":25925,"line_start":7,"line_end":7,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\affine.rs","byte_start":26378,"byte_end":26387,"line_start":26,"line_end":26,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\affine.rs","byte_start":26852,"byte_end":26861,"line_start":45,"line_end":45,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\affine.rs","byte_start":27301,"byte_end":27316,"line_start":64,"line_end":64,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\affine.rs","byte_start":27754,"byte_end":27767,"line_start":83,"line_end":83,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":214},{"krate":0,"index":220},{"krate":0,"index":225},{"krate":0,"index":3027},{"krate":0,"index":3030},{"krate":0,"index":3029},{"krate":0,"index":229},{"krate":0,"index":233},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":246}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":31846,"byte_end":31855,"line_start":15,"line_end":15,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"fn <I> (image: &I) -> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":32394,"byte_end":32400,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":32863,"byte_end":32871,"line_start":53,"line_end":53,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"fn <I, P, S> (image: &I, contrast: f32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":33846,"byte_end":33854,"line_start":88,"line_end":88,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"fn <I, P, S> (image: &I, value: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":34840,"byte_end":34849,"line_start":123,"line_end":123,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"fn <I, P, S> (image: &I, value: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":36763,"byte_end":36771,"line_start":180,"line_end":180,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":36835,"byte_end":36840,"line_start":182,"line_end":182,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":36932,"byte_end":36940,"line_start":185,"line_end":185,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"fn (&self, color: &Self::Color) -> usize","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Returns the index of the closed match of `color`\n in the color map.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":37046,"byte_end":37055,"line_start":187,"line_end":187,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"fn (&self, color: &mut Self::Color) -> ()","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3027},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":37151,"byte_end":37158,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":37140,"byte_end":37159,"line_start":192,"line_end":192,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":39017,"byte_end":39023,"line_start":258,"line_end":258,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"fn <Pix, Map> (image: &mut ImageBuffer<Pix, Vec<u8>>, color_map: &Map) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":40568,"byte_end":40580,"line_start":296,"line_end":296,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"fn <Pix, Map> (image: &ImageBuffer<Pix, Vec<u8>>, color_map: &Map) -> ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3033},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":41866,"byte_end":41873,"line_start":19,"line_end":19,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":3032},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3035},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":41902,"byte_end":41910,"line_start":22,"line_end":22,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":3032},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3037},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":41938,"byte_end":41948,"line_start":25,"line_end":25,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":3032},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3039},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":41979,"byte_end":41987,"line_start":28,"line_end":28,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":3032},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3041},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":42024,"byte_end":42032,"line_start":31,"line_end":31,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":3032},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3032},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":41824,"byte_end":41834,"line_start":17,"line_end":17,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"FilterType::{Nearest, Triangle, CatmullRom, Gaussian, Lanczos3}","parent":null,"children":[{"krate":0,"index":3033},{"krate":0,"index":3035},{"krate":0,"index":3037},{"krate":0,"index":3039},{"krate":0,"index":3041}],"decl_id":null,"docs":" Available Sampling Filters\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":41815,"byte_end":42035,"line_start":17,"line_end":32,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":51431,"byte_end":51440,"line_start":328,"line_end":328,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"fn <I, P, S> (image: &I, new_width: u32, new_height: u32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":59320,"byte_end":59329,"line_start":567,"line_end":567,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"fn <I, P, S> (image: &I, kernel: &[f32]) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":61756,"byte_end":61762,"line_start":647,"line_end":647,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"fn <I> (image: &I, nwidth: u32, nheight: u32, filter: FilterType) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":62888,"byte_end":62892,"line_start":686,"line_end":686,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"fn <I> (image: &I, sigma: f32) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":63715,"byte_end":63724,"line_start":713,"line_end":713,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"fn <I, P, S> (image: &I, sigma: f32, threshold: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":19049,"byte_end":19053,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"fn <I> (image: &mut I, x: u32, y: u32, width: u32, height: u32) -> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":21615,"byte_end":21629,"line_start":102,"line_end":102,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"fn ((bottom_width, bottom_height): (u32, u32), (top_width, top_height): (u32, u32), x: u32, y: u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":22144,"byte_end":22151,"line_start":120,"line_end":120,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"fn <I, J> (bottom: &mut I, top: &J, x: u32, y: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":22883,"byte_end":22890,"line_start":143,"line_end":143,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"fn <I, J> (bottom: &mut I, top: &J, x: u32, y: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":3048},{"krate":0,"index":3056},{"krate":0,"index":3053},{"krate":0,"index":3059},{"krate":0,"index":3077},{"krate":0,"index":3076},{"krate":0,"index":3074},{"krate":0,"index":3071},{"krate":0,"index":3069},{"krate":0,"index":3066},{"krate":0,"index":3079},{"krate":0,"index":3103},{"krate":0,"index":3102},{"krate":0,"index":3100},{"krate":0,"index":3097},{"krate":0,"index":3095},{"krate":0,"index":3085},{"krate":0,"index":3083},{"krate":0,"index":360},{"krate":0,"index":383},{"krate":0,"index":387},{"krate":0,"index":3105},{"krate":0,"index":3114},{"krate":0,"index":3110},{"krate":0,"index":3118},{"krate":0,"index":3127},{"krate":0,"index":3123},{"krate":0,"index":3131},{"krate":0,"index":3151},{"krate":0,"index":3150},{"krate":0,"index":3148},{"krate":0,"index":3145},{"krate":0,"index":3143},{"krate":0,"index":3140},{"krate":0,"index":3153},{"krate":0,"index":3174},{"krate":0,"index":3173},{"krate":0,"index":3171},{"krate":0,"index":3169},{"krate":0,"index":3167},{"krate":0,"index":3164},{"krate":0,"index":429},{"krate":0,"index":442},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":461},{"krate":0,"index":465},{"krate":0,"index":477},{"krate":0,"index":489},{"krate":0,"index":497},{"krate":0,"index":499}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3048},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":68728,"byte_end":68739,"line_start":65,"line_end":65,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":3050},{"krate":0,"index":3051},{"krate":0,"index":3052}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3050},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":68817,"byte_end":68824,"line_start":67,"line_end":67,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":3048},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3051},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":68908,"byte_end":68914,"line_start":70,"line_end":70,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":3048},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3052},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":69369,"byte_end":69379,"line_start":78,"line_end":78,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":3048},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3059},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":69529,"byte_end":69541,"line_start":84,"line_end":84,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":3060},{"krate":0,"index":3061},{"krate":0,"index":3062},{"krate":0,"index":3063},{"krate":0,"index":3064},{"krate":0,"index":3065}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":69456,"byte_end":69466,"line_start":82,"line_end":82,"column_start":1,"column_end":11}},{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":69518,"byte_end":70078,"line_start":84,"line_end":102,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":69518,"byte_end":70078,"line_start":84,"line_end":102,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":3060},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":69625,"byte_end":69633,"line_start":86,"line_end":86,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":3059},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3061},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":69719,"byte_end":69733,"line_start":89,"line_end":89,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":3059},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3062},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":69795,"byte_end":69800,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":3059},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3063},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":69887,"byte_end":69899,"line_start":95,"line_end":95,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":3059},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3064},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":69962,"byte_end":69968,"line_start":98,"line_end":98,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":3059},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3065},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":70055,"byte_end":70068,"line_start":101,"line_end":101,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":3059},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":71043,"byte_end":71059,"line_start":125,"line_end":125,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"fn (channels: u8, width: u32, height: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":72310,"byte_end":72329,"line_start":154,"line_end":154,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"fn (channels: u8, width: u32, height: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":72945,"byte_end":72956,"line_start":171,"line_end":171,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":73273,"byte_end":73280,"line_start":179,"line_end":179,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":73654,"byte_end":73660,"line_start":187,"line_end":187,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"fn (&self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":75815,"byte_end":75825,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.\n \n This method will allow zero strides, allowing compact representations of monochrome images.\n To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no\n aliasing and no unindexed samples) this is `width*height*channels`. But for both of the\n other cases, the reasoning is slightly more involved.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":76157,"byte_end":76161,"line_start":252,"line_end":252,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"fn (&self, len: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":77279,"byte_end":77298,"line_start":277,"line_end":277,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":78543,"byte_end":78552,"line_start":307,"line_end":307,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"fn (&self, form: NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":80270,"byte_end":80279,"line_start":362,"line_end":362,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"fn (&self, channel: u8, x: u32, y: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":80560,"byte_end":80565,"line_start":369,"line_end":369,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":81159,"byte_end":81180,"line_start":382,"line_end":382,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"fn (&self, channel: usize, x: usize, y: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":82111,"byte_end":82126,"line_start":403,"line_end":403,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"fn (&self, c: u8, x: u32, y: u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":82654,"byte_end":82663,"line_start":414,"line_end":414,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"fn (&mut self, channels: u8, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":83336,"byte_end":83347,"line_start":441,"line_end":441,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":83629,"byte_end":83636,"line_start":449,"line_end":449,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":83964,"byte_end":83970,"line_start":457,"line_end":457,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"fn (&self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":84084,"byte_end":84090,"line_start":462,"line_end":462,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"fn <T> (&self) -> FlatSamples<&[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":84364,"byte_end":84370,"line_start":471,"line_end":471,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"fn <T> (&mut self) -> FlatSamples<&mut [T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":84649,"byte_end":84655,"line_start":480,"line_end":480,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"fn <T> (&self) -> FlatSamples<Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":85931,"byte_end":85941,"line_start":511,"line_end":511,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"fn <T> (&self, channel: u8, x: u32, y: u32) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":87540,"byte_end":87554,"line_start":544,"line_end":544,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"fn <T> (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":88225,"byte_end":88232,"line_start":559,"line_end":559,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"fn <P> (&self) -> Result<View<&[P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":89810,"byte_end":89834,"line_start":596,"line_end":596,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"fn <P> (&mut self) -> Result<View<&mut [P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":91197,"byte_end":91208,"line_start":629,"line_end":629,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"fn <P> (&mut self) -> Result<ViewMut<&mut [P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":92205,"byte_end":92213,"line_start":659,"line_end":659,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"fn <T> (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":92524,"byte_end":92536,"line_start":667,"line_end":667,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"fn <T> (&mut self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":92967,"byte_end":92978,"line_start":676,"line_end":676,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"fn <T> (&self) -> Option<&[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":93395,"byte_end":93410,"line_start":691,"line_end":691,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"fn <T> (&mut self) -> Option<&mut [T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":94064,"byte_end":94079,"line_start":710,"line_end":710,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"fn <P> (self) -> Result<ImageBuffer<P, Buffer>, (Error, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":96919,"byte_end":96929,"line_start":784,"line_end":784,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.\n \n This method will allow zero strides, allowing compact representations of monochrome images.\n To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no\n aliasing and no unindexed samples) this is `width*height*channels`. But for both of the\n other cases, the reasoning is slightly more involved.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":97066,"byte_end":97070,"line_start":789,"line_end":789,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"fn (&self, len: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":97491,"byte_end":97510,"line_start":798,"line_end":798,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":98091,"byte_end":98100,"line_start":809,"line_end":809,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"fn (&self, form: NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":98525,"byte_end":98534,"line_start":818,"line_end":818,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"fn (&self, channel: u8, x: u32, y: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":98784,"byte_end":98789,"line_start":825,"line_end":825,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":99268,"byte_end":99289,"line_start":834,"line_end":834,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"fn (&self, channel: usize, x: usize, y: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":99721,"byte_end":99736,"line_start":843,"line_end":843,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"fn (&self, channel: u8, x: u32, y: u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":100171,"byte_end":100180,"line_start":852,"line_end":852,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"fn (&mut self, channels: u8, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3105},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":100999,"byte_end":101003,"line_start":872,"line_end":872,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":3108},{"krate":0,"index":3109}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3118},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":101852,"byte_end":101859,"line_start":895,"line_end":895,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":3121},{"krate":0,"index":3122}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3132},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":102570,"byte_end":102578,"line_start":914,"line_end":914,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":3131},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3134},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":102735,"byte_end":102753,"line_start":919,"line_end":919,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":3131},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3137},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":103362,"byte_end":103372,"line_start":930,"line_end":930,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":3131},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3131},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":102435,"byte_end":102440,"line_start":910,"line_end":910,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"Error::{TooLarge, NormalFormRequired, WrongColor}","parent":null,"children":[{"krate":0,"index":3132},{"krate":0,"index":3134},{"krate":0,"index":3137}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":102426,"byte_end":103386,"line_start":910,"line_end":931,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":102426,"byte_end":103386,"line_start":910,"line_end":931,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3154},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":103872,"byte_end":103881,"line_start":943,"line_end":943,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":3153},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3156},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":104111,"byte_end":104122,"line_start":949,"line_end":949,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":3153},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3158},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":104406,"byte_end":104417,"line_start":956,"line_end":956,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":3153},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3160},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":104628,"byte_end":104642,"line_start":962,"line_end":962,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":3153},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3162},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":104859,"byte_end":104876,"line_start":968,"line_end":968,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":3153},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3153},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":103632,"byte_end":103642,"line_start":938,"line_end":938,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"NormalForm::{Unaliased, PixelPacked, ImagePacked, RowMajorPacked, ColumnMajorPacked}","parent":null,"children":[{"krate":0,"index":3154},{"krate":0,"index":3156},{"krate":0,"index":3158},{"krate":0,"index":3160},{"krate":0,"index":3162}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":103623,"byte_end":104879,"line_start":938,"line_end":969,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":103623,"byte_end":104879,"line_start":938,"line_end":969,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":105086,"byte_end":105096,"line_start":978,"line_end":978,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"fn (self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":105579,"byte_end":105583,"line_start":988,"line_end":988,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"fn (&self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":105862,"byte_end":105869,"line_start":996,"line_end":996,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"fn (&self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":106188,"byte_end":106198,"line_start":1004,"line_end":1004,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":107072,"byte_end":107086,"line_start":1022,"line_end":1022,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"fn (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":107664,"byte_end":107674,"line_start":1037,"line_end":1037,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":108008,"byte_end":108019,"line_start":1045,"line_end":1045,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"fn (&self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":108476,"byte_end":108491,"line_start":1054,"line_end":1054,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"fn (&mut self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":109015,"byte_end":109024,"line_start":1066,"line_end":1066,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"fn (&mut self, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":110009,"byte_end":110020,"line_start":1088,"line_end":1088,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"fn (self) -> Result<ViewMut<Buffer, P>, (Error, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":110663,"byte_end":110673,"line_start":1110,"line_end":1110,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"fn (self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":111157,"byte_end":111161,"line_start":1120,"line_end":1120,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"fn (&self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":111534,"byte_end":111541,"line_start":1129,"line_end":1129,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"fn (&self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":111783,"byte_end":111793,"line_start":1136,"line_end":1136,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":112104,"byte_end":112114,"line_start":1144,"line_end":1144,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":112739,"byte_end":112753,"line_start":1160,"line_end":1160,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"fn (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":113364,"byte_end":113375,"line_start":1174,"line_end":1174,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"fn (&self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":113574,"byte_end":113589,"line_start":1179,"line_end":1179,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"fn (&mut self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":114057,"byte_end":114066,"line_start":1189,"line_end":1189,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"fn (&mut self, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bmp","qualname":"::bmp","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\mod.rs","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":694}],"decl_id":null,"docs":"  Decoding and Encoding of BMP Images","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2129,"byte_end":2152,"line_start":81,"line_end":81,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":597},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":139195,"byte_end":139205,"line_start":426,"line_end":426,"column_start":12,"column_end":22},"name":"BMPDecoder","qualname":"::bmp::decoder::BMPDecoder","value":"BMPDecoder {  }","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612}],"decl_id":null,"docs":" A bmp decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":141768,"byte_end":141771,"line_start":513,"line_end":513,"column_start":12,"column_end":15},"name":"new","qualname":"<BMPDecoder<R>>::new","value":"fn (r: R) -> ImageResult<BMPDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":152329,"byte_end":152356,"line_start":822,"line_end":822,"column_start":12,"column_end":39},"name":"read_metadata_in_ico_format","qualname":"<BMPDecoder<R>>::read_metadata_in_ico_format","value":"fn (&mut self) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":152275,"byte_end":152298,"line_start":820,"line_end":820,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":172101,"byte_end":172110,"line_start":1293,"line_end":1293,"column_start":12,"column_end":21},"name":"BmpReader","qualname":"::bmp::decoder::BmpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\encoder.rs","byte_start":174609,"byte_end":174619,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"BMPEncoder","qualname":"::bmp::encoder::BMPEncoder","value":"BMPEncoder {  }","parent":null,"children":[{"krate":0,"index":708}],"decl_id":null,"docs":" The representation of a BMP encoder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\encoder.rs","byte_start":174778,"byte_end":174781,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<BMPEncoder>::new","value":"fn (w: &'a mut W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\encoder.rs","byte_start":174989,"byte_end":174995,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"encode","qualname":"<BMPEncoder>::encode","value":"fn (&mut self, image: &[u8], width: u32, height: u32, c: color::ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":720},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dxt","qualname":"::dxt","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":3249},{"krate":0,"index":3263},{"krate":0,"index":3262},{"krate":0,"index":3260},{"krate":0,"index":3258},{"krate":0,"index":3256},{"krate":0,"index":736},{"krate":0,"index":740},{"krate":0,"index":747},{"krate":0,"index":751},{"krate":0,"index":760},{"krate":0,"index":767},{"krate":0,"index":771},{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":791},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":801},{"krate":0,"index":803},{"krate":0,"index":805},{"krate":0,"index":816},{"krate":0,"index":820},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":830}],"decl_id":null,"docs":"  Decoding of DXT (S3TC) compression","sig":null,"attributes":[{"value":"cfg(feature = \"dxt\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2166,"byte_end":2189,"line_start":83,"line_end":83,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3250},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":186335,"byte_end":186339,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"DXT1","qualname":"::dxt::DXTVariant::DXT1","value":"DXTVariant::DXT1","parent":{"krate":0,"index":3249},"children":[],"decl_id":null,"docs":" The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is\n compressed into an 8 byte block of DXT1 data\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3252},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":186470,"byte_end":186474,"line_start":25,"line_end":25,"column_start":5,"column_end":9},"name":"DXT3","qualname":"::dxt::DXTVariant::DXT3","value":"DXTVariant::DXT3","parent":{"krate":0,"index":3249},"children":[],"decl_id":null,"docs":" The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT3 data\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3254},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":186605,"byte_end":186609,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"DXT5","qualname":"::dxt::DXTVariant::DXT5","value":"DXTVariant::DXT5","parent":{"krate":0,"index":3249},"children":[],"decl_id":null,"docs":" The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT5 data\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3249},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":186194,"byte_end":186204,"line_start":19,"line_end":19,"column_start":10,"column_end":20},"name":"DXTVariant","qualname":"::dxt::DXTVariant","value":"DXTVariant::{DXT1, DXT3, DXT5}","parent":null,"children":[{"krate":0,"index":3250},{"krate":0,"index":3252},{"krate":0,"index":3254}],"decl_id":null,"docs":" What version of DXT compression are we using?\n Note that DXT2 and DXT4 are left away as they're\n just DXT3 and DXT5 with premultiplied alpha\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":186185,"byte_end":186612,"line_start":19,"line_end":29,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":186185,"byte_end":186612,"line_start":19,"line_end":29,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":187229,"byte_end":187238,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"colortype","qualname":"<DXTVariant>::colortype","value":"fn (self) -> ColorType","parent":null,"children":[],"decl_id":null,"docs":" Returns the colortype that is stored in this DXT variant\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":187449,"byte_end":187459,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"DXTDecoder","qualname":"::dxt::DXTDecoder","value":"DXTDecoder {  }","parent":null,"children":[{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746}],"decl_id":null,"docs":" DXT decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":188039,"byte_end":188042,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<DXTDecoder<R>>::new","value":"fn (r: R, width: u32, height: u32, variant: DXTVariant) -> Result<DXTDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new DXT decoder that decodes from the stream ```r```.\n As DXT is often stored as raw buffers with the width/height\n somewhere else the width and height of the image need\n to be passed in ```width``` and ```height```, as well as the\n DXT variant in ```variant```.\n width and height are required to be powers of 2 and at least 4.\n otherwise an error will be returned\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":191282,"byte_end":191291,"line_start":178,"line_end":178,"column_start":12,"column_end":21},"name":"DXTReader","qualname":"::dxt::DXTReader","value":"DXTReader {  }","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":770}],"decl_id":null,"docs":" DXT reader\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":775},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":191611,"byte_end":191621,"line_start":190,"line_end":190,"column_start":12,"column_end":22},"name":"DXTEncoder","qualname":"::dxt::DXTEncoder","value":"DXTEncoder {  }","parent":null,"children":[{"krate":0,"index":777}],"decl_id":null,"docs":" DXT encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":191752,"byte_end":191755,"line_start":196,"line_end":196,"column_start":12,"column_end":15},"name":"new","qualname":"<DXTEncoder<W>>::new","value":"fn (w: W) -> DXTEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":192018,"byte_end":192024,"line_start":204,"line_end":204,"column_start":12,"column_end":18},"name":"encode","qualname":"<DXTEncoder<W>>::encode","value":"fn (mut self, data: &[u8], width: u32, height: u32, variant: DXTVariant) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image data ```data```\n that has dimensions ```width``` and ```height```\n in ```DXTVariant``` ```variant```\n data is assumed to be in variant.colortype()\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":832},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gif","qualname":"::gif","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","parent":null,"children":[{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":846},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":864},{"krate":0,"index":867},{"krate":0,"index":872},{"krate":0,"index":876},{"krate":0,"index":884},{"krate":0,"index":895},{"krate":0,"index":898},{"krate":0,"index":902},{"krate":0,"index":906},{"krate":0,"index":910},{"krate":0,"index":921}],"decl_id":null,"docs":"  Decoding of GIF Images","sig":null,"attributes":[{"value":"cfg(feature = \"gif_codec\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2203,"byte_end":2232,"line_start":85,"line_end":85,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":861},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":215246,"byte_end":215253,"line_start":48,"line_end":48,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::gif::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":863}],"decl_id":null,"docs":" GIF decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":215401,"byte_end":215404,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder<R>>::new","value":"fn (r: R) -> ImageResult<Decoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes the input steam ```r```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":867},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":215669,"byte_end":215678,"line_start":65,"line_end":65,"column_start":12,"column_end":21},"name":"GifReader","qualname":"::gif::GifReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":222389,"byte_end":222396,"line_start":263,"line_end":263,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::gif::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":908},{"krate":0,"index":909}],"decl_id":null,"docs":" GIF encoder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":222546,"byte_end":222549,"line_start":270,"line_end":270,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder<W>>::new","value":"fn (w: W) -> Encoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new GIF encoder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":222697,"byte_end":222703,"line_start":277,"line_end":277,"column_start":12,"column_end":18},"name":"encode","qualname":"<Encoder<W>>::encode","value":"fn (&mut self, frame: &Frame) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes a frame.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":223348,"byte_end":223361,"line_start":292,"line_end":292,"column_start":12,"column_end":25},"name":"encode_frames","qualname":"<Encoder<W>>::encode_frames","value":"fn <F> (&mut self, frames: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes Frames.\n Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":223847,"byte_end":223864,"line_start":305,"line_end":305,"column_start":12,"column_end":29},"name":"try_encode_frames","qualname":"<Encoder<W>>::try_encode_frames","value":"fn <F> (&mut self, frames: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to encode a collection of `ImageResult<animation::Frame>` objects.\n Use this function to encode an `animation::Frames` like iterator.\n Whenever an `Err` item is encountered, that value is returned without further actions.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":924},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hdr","qualname":"::hdr","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\mod.rs","parent":null,"children":[{"krate":0,"index":925},{"krate":0,"index":1077},{"krate":0,"index":1126},{"krate":0,"index":1127}],"decl_id":null,"docs":"  Decoding of Radiance HDR Images","sig":null,"attributes":[{"value":"cfg(feature = \"hdr\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2246,"byte_end":2269,"line_start":87,"line_end":87,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":3265},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":225820,"byte_end":225830,"line_start":19,"line_end":19,"column_start":12,"column_end":22},"name":"HDRAdapter","qualname":"::hdr::decoder::HDRAdapter","value":"HDRAdapter {  }","parent":null,"children":[{"krate":0,"index":3267},{"krate":0,"index":3268},{"krate":0,"index":3269}],"decl_id":null,"docs":" Adapter to conform to ```ImageDecoder``` trait\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":226000,"byte_end":226003,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<HDRAdapter<R>>::new","value":"fn (r: R) -> ImageResult<HDRAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates adapter\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":226300,"byte_end":226313,"line_start":38,"line_end":38,"column_start":12,"column_end":25},"name":"new_nonstrict","qualname":"<HDRAdapter<R>>::new_nonstrict","value":"fn (r: R) -> ImageResult<HDRAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Allows reading old Radiance HDR images\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":957},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":227306,"byte_end":227315,"line_start":71,"line_end":71,"column_start":12,"column_end":21},"name":"HdrReader","qualname":"::hdr::decoder::HdrReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":981},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":229071,"byte_end":229080,"line_start":134,"line_end":134,"column_start":11,"column_end":20},"name":"SIGNATURE","qualname":"::hdr::decoder::SIGNATURE","value":"&[u8]","parent":null,"children":[],"decl_id":null,"docs":" Radiance HDR file signature\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3273},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":229198,"byte_end":229208,"line_start":139,"line_end":139,"column_start":12,"column_end":22},"name":"HDRDecoder","qualname":"::hdr::decoder::HDRDecoder","value":"HDRDecoder {  }","parent":null,"children":[{"krate":0,"index":3275},{"krate":0,"index":3276},{"krate":0,"index":3277},{"krate":0,"index":3278}],"decl_id":null,"docs":" An Radiance HDR decoder\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3282},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":229433,"byte_end":229443,"line_start":149,"line_end":149,"column_start":12,"column_end":22},"name":"RGBE8Pixel","qualname":"::hdr::decoder::RGBE8Pixel","value":"RGBE8Pixel { c, e }","parent":null,"children":[{"krate":0,"index":3283},{"krate":0,"index":3285}],"decl_id":null,"docs":" Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":229357,"byte_end":229367,"line_start":147,"line_end":147,"column_start":1,"column_end":11}},{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":229422,"byte_end":229524,"line_start":149,"line_end":154,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":229422,"byte_end":229524,"line_start":149,"line_end":154,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":3283},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":229479,"byte_end":229480,"line_start":151,"line_end":151,"column_start":9,"column_end":10},"name":"c","qualname":"::hdr::decoder::RGBE8Pixel::c","value":"[u8; _]","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" Color components\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3285},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":229516,"byte_end":229517,"line_start":153,"line_end":153,"column_start":9,"column_end":10},"name":"e","qualname":"::hdr::decoder::RGBE8Pixel::e","value":"u8","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" Exponent\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":983},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":229578,"byte_end":229583,"line_start":157,"line_end":157,"column_start":8,"column_end":13},"name":"rgbe8","qualname":"::hdr::decoder::rgbe8","value":"fn (r: u8, g: u8, b: u8, e: u8) -> RGBE8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Creates ```RGBE8Pixel``` from components\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":229772,"byte_end":229778,"line_start":164,"line_end":164,"column_start":12,"column_end":18},"name":"to_hdr","qualname":"<RGBE8Pixel>::to_hdr","value":"fn (self) -> Rgb<f32>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":229751,"byte_end":229760,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":230538,"byte_end":230544,"line_start":186,"line_end":186,"column_start":12,"column_end":18},"name":"to_ldr","qualname":"<RGBE8Pixel>::to_ldr","value":"fn <T> (self) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":230517,"byte_end":230526,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":230930,"byte_end":230948,"line_start":199,"line_end":199,"column_start":12,"column_end":30},"name":"to_ldr_scale_gamma","qualname":"<RGBE8Pixel>::to_ldr_scale_gamma","value":"fn <T> (self, scale: f32, gamma: f32) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts RGBE8Pixel into Rgb<T> using provided scale and gamma","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":230909,"byte_end":230918,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":232132,"byte_end":232135,"line_start":230,"line_end":230,"column_start":12,"column_end":15},"name":"new","qualname":"<HDRDecoder<R>>::new","value":"fn (reader: R) -> ImageResult<HDRDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```r```\n if the header is valid, creates HDRDecoder\n strict mode is enabled\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":232543,"byte_end":232558,"line_start":241,"line_end":241,"column_start":12,"column_end":27},"name":"with_strictness","qualname":"<HDRDecoder<R>>::with_strictness","value":"fn (mut reader: R, strict: bool) -> ImageResult<HDRDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```reader```,\n if the header is valid, creates ```HDRDecoder```.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":235208,"byte_end":235216,"line_start":310,"line_end":310,"column_start":12,"column_end":20},"name":"metadata","qualname":"<HDRDecoder<R>>::metadata","value":"fn (&self) -> HDRMetadata","parent":null,"children":[],"decl_id":null,"docs":" Returns file metadata. Refer to ```HDRMetadata``` for details.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":235347,"byte_end":235364,"line_start":315,"line_end":315,"column_start":12,"column_end":29},"name":"read_image_native","qualname":"<HDRDecoder<R>>::read_image_native","value":"fn (mut self) -> ImageResult<Vec<RGBE8Pixel>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of RGBE8 pixels\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":235997,"byte_end":236017,"line_start":330,"line_end":330,"column_start":12,"column_end":32},"name":"read_image_transform","qualname":"<HDRDecoder<R>>::read_image_transform","value":"fn <T, F> (mut self, f: F, output_slice: &mut [T]) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of transformed pixels\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":237125,"byte_end":237139,"line_start":363,"line_end":363,"column_start":12,"column_end":26},"name":"read_image_ldr","qualname":"<HDRDecoder<R>>::read_image_ldr","value":"fn (self) -> ImageResult<Vec<Rgb<u8>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<u8> pixels.\n scale = 1, gamma = 2.2\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":237441,"byte_end":237455,"line_start":371,"line_end":371,"column_start":12,"column_end":26},"name":"read_image_hdr","qualname":"<HDRDecoder<R>>::read_image_hdr","value":"fn (self) -> ImageResult<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<f32> pixels.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1011},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":238266,"byte_end":238289,"line_start":396,"line_end":396,"column_start":12,"column_end":35},"name":"HDRImageDecoderIterator","qualname":"::hdr::decoder::HDRImageDecoderIterator","value":"HDRImageDecoderIterator {  }","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019}],"decl_id":null,"docs":" Scanline buffered pixel by pixel iterator\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3302},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":246025,"byte_end":246036,"line_start":625,"line_end":625,"column_start":12,"column_end":23},"name":"HDRMetadata","qualname":"::hdr::decoder::HDRMetadata","value":"HDRMetadata { width, height, orientation, exposure, color_correction, pixel_aspect_ratio, custom_attributes }","parent":null,"children":[{"krate":0,"index":3303},{"krate":0,"index":3304},{"krate":0,"index":3305},{"krate":0,"index":3306},{"krate":0,"index":3307},{"krate":0,"index":3308},{"krate":0,"index":3309}],"decl_id":null,"docs":" Metadata for Radiance HDR image\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3303},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":246174,"byte_end":246179,"line_start":628,"line_end":628,"column_start":9,"column_end":14},"name":"width","qualname":"::hdr::decoder::HDRMetadata::width","value":"u32","parent":{"krate":0,"index":3302},"children":[],"decl_id":null,"docs":" Width of decoded image. It could be either scanline length,\n or scanline count, depending on image orientation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3304},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":246258,"byte_end":246264,"line_start":630,"line_end":630,"column_start":9,"column_end":15},"name":"height","qualname":"::hdr::decoder::HDRMetadata::height","value":"u32","parent":{"krate":0,"index":3302},"children":[],"decl_id":null,"docs":" Height of decoded image. It depends on orientation too.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3305},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":246539,"byte_end":246550,"line_start":634,"line_end":634,"column_start":9,"column_end":20},"name":"orientation","qualname":"::hdr::decoder::HDRMetadata::orientation","value":"((i8, i8), (i8, i8))","parent":{"krate":0,"index":3302},"children":[],"decl_id":null,"docs":" Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.\n First pair tells how resulting pixel coordinates change along a scanline.\n Second pair tells how they change from one scanline to the next.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3306},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":246775,"byte_end":246783,"line_start":639,"line_end":639,"column_start":9,"column_end":17},"name":"exposure","qualname":"::hdr::decoder::HDRMetadata::exposure","value":"std::option::Option<f32>","parent":{"krate":0,"index":3302},"children":[],"decl_id":null,"docs":" Divide color values by exposure to get to get physical radiance in\n watts/steradian/m<sup>2</sup>","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3307},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":247027,"byte_end":247043,"line_start":644,"line_end":644,"column_start":9,"column_end":25},"name":"color_correction","qualname":"::hdr::decoder::HDRMetadata::color_correction","value":"std::option::Option<(f32, f32, f32)>","parent":{"krate":0,"index":3302},"children":[],"decl_id":null,"docs":" Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance\n in watts/steradian/m<sup>2</sup>","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3308},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":247122,"byte_end":247140,"line_start":646,"line_end":646,"column_start":9,"column_end":27},"name":"pixel_aspect_ratio","qualname":"::hdr::decoder::HDRMetadata::pixel_aspect_ratio","value":"std::option::Option<f32>","parent":{"krate":0,"index":3302},"children":[],"decl_id":null,"docs":" Pixel height divided by pixel width\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3309},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":247369,"byte_end":247386,"line_start":650,"line_end":650,"column_start":9,"column_end":26},"name":"custom_attributes","qualname":"::hdr::decoder::HDRMetadata::custom_attributes","value":"std::vec::Vec<(std::string::String, std::string::String)>","parent":{"krate":0,"index":3302},"children":[],"decl_id":null,"docs":" All lines contained in image header are put here. Ordering of lines is preserved.\n Lines in the form \"key=value\" are represented as (\"key\", \"value\").\n All other lines are (\"\", \"line\")\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1070},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":257299,"byte_end":257312,"line_start":915,"line_end":915,"column_start":8,"column_end":21},"name":"read_raw_file","qualname":"::hdr::decoder::read_raw_file","value":"fn <P> (path: P) -> ::std::io::Result<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for reading raw 3-channel f32 images\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1086},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":258064,"byte_end":258074,"line_start":6,"line_end":6,"column_start":12,"column_end":22},"name":"HDREncoder","qualname":"::hdr::encoder::HDREncoder","value":"HDREncoder {  }","parent":null,"children":[{"krate":0,"index":1088}],"decl_id":null,"docs":" Radiance HDR encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":258166,"byte_end":258169,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"new","qualname":"<HDREncoder<W>>::new","value":"fn (w: W) -> HDREncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":258332,"byte_end":258338,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"encode","qualname":"<HDREncoder<W>>::encode","value":"fn (mut self, data: &[Rgb<f32>], width: usize, height: usize) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data```\n that has dimensions ```width``` and ```height```\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1124},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":265828,"byte_end":265836,"line_start":228,"line_end":228,"column_start":8,"column_end":16},"name":"to_rgbe8","qualname":"::hdr::encoder::to_rgbe8","value":"fn (pix: Rgb<f32>) -> RGBE8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Converts ```Rgb<f32>``` into ```RGBE8Pixel```\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1128},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ico","qualname":"::ico","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\mod.rs","parent":null,"children":[{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1202}],"decl_id":null,"docs":"  Decoding and Encoding of ICO files","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2283,"byte_end":2306,"line_start":89,"line_end":89,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1153},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\decoder.rs","byte_start":274084,"byte_end":274094,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"ICODecoder","qualname":"::ico::decoder::ICODecoder","value":"ICODecoder {  }","parent":null,"children":[{"krate":0,"index":1155},{"krate":0,"index":1156}],"decl_id":null,"docs":" An ico decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\decoder.rs","byte_start":274592,"byte_end":274595,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<ICODecoder<R>>::new","value":"fn (mut r: R) -> ImageResult<ICODecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1185},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\decoder.rs","byte_start":278185,"byte_end":278194,"line_start":164,"line_end":164,"column_start":12,"column_end":21},"name":"IcoReader","qualname":"::ico::decoder::IcoReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1216},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\encoder.rs","byte_start":283459,"byte_end":283469,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"ICOEncoder","qualname":"::ico::encoder::ICOEncoder","value":"ICOEncoder {  }","parent":null,"children":[{"krate":0,"index":1218}],"decl_id":null,"docs":" ICO encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1221},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\encoder.rs","byte_start":283601,"byte_end":283604,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<ICOEncoder<W>>::new","value":"fn (w: W) -> ICOEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\encoder.rs","byte_start":283902,"byte_end":283908,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"encode","qualname":"<ICOEncoder<W>>::encode","value":"fn (mut self, data: &[u8], width: u32, height: u32, color: ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image``` that has dimensions ```width``` and\n ```height``` and ```ColorType``` ```c```.  The dimensions of the image\n must be between 1 and 256 (inclusive) or an error will be returned.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1229},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::jpeg","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\mod.rs","parent":null,"children":[{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1276},{"krate":0,"index":1380},{"krate":0,"index":1383}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2320,"byte_end":2344,"line_start":91,"line_end":91,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1245},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","byte_start":286611,"byte_end":286622,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"JPEGDecoder","qualname":"::jpeg::decoder::JPEGDecoder","value":"JPEGDecoder {  }","parent":null,"children":[{"krate":0,"index":1247},{"krate":0,"index":1248}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","byte_start":286817,"byte_end":286820,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<JPEGDecoder<R>>::new","value":"fn (r: R) -> ImageResult<JPEGDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1252},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","byte_start":287371,"byte_end":287381,"line_start":37,"line_end":37,"column_start":12,"column_end":22},"name":"JpegReader","qualname":"::jpeg::decoder::JpegReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1339},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\encoder.rs","byte_start":298536,"byte_end":298547,"line_start":277,"line_end":277,"column_start":12,"column_end":23},"name":"JPEGEncoder","qualname":"::jpeg::encoder::JPEGEncoder","value":"JPEGEncoder {  }","parent":null,"children":[{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\encoder.rs","byte_start":298903,"byte_end":298906,"line_start":291,"line_end":291,"column_start":12,"column_end":15},"name":"new","qualname":"<JPEGEncoder>::new","value":"fn (w: &mut W) -> JPEGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\encoder.rs","byte_start":299199,"byte_end":299215,"line_start":298,"line_end":298,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JPEGEncoder>::new_with_quality","value":"fn (w: &mut W, quality: u8) -> JPEGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\encoder.rs","byte_start":301502,"byte_end":301508,"line_start":370,"line_end":370,"column_start":12,"column_end":18},"name":"encode","qualname":"<JPEGEncoder>::encode","value":"fn (&mut self, image: &[u8], width: u32, height: u32, c: color::ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1399},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::png","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1410},{"krate":0,"index":1415},{"krate":0,"index":1418},{"krate":0,"index":1422},{"krate":0,"index":1426},{"krate":0,"index":1429},{"krate":0,"index":1438},{"krate":0,"index":1441},{"krate":0,"index":1446},{"krate":0,"index":1449},{"krate":0,"index":1452}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png_codec\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2359,"byte_end":2388,"line_start":93,"line_end":93,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1410},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":324327,"byte_end":324336,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"PNGReader","qualname":"::png::PNGReader","value":"PNGReader {  }","parent":null,"children":[{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414}],"decl_id":null,"docs":" PNG Reader","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1422},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":326352,"byte_end":326362,"line_start":92,"line_end":92,"column_start":12,"column_end":22},"name":"PNGDecoder","qualname":"::png::PNGDecoder","value":"PNGDecoder {  }","parent":null,"children":[{"krate":0,"index":1424},{"krate":0,"index":1425}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":326539,"byte_end":326542,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"new","qualname":"<PNGDecoder<R>>::new","value":"fn (r: R) -> ImageResult<PNGDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1438},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":327715,"byte_end":327725,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"PNGEncoder","qualname":"::png::PNGEncoder","value":"PNGEncoder {  }","parent":null,"children":[{"krate":0,"index":1440}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1443},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":327856,"byte_end":327859,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"new","qualname":"<PNGEncoder<W>>::new","value":"fn (w: W) -> PNGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":328059,"byte_end":328065,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"name":"encode","qualname":"<PNGEncoder<W>>::encode","value":"fn (self, data: &[u8], width: u32, height: u32, color: ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1455},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pnm","qualname":"::pnm","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\mod.rs","parent":null,"children":[{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1466},{"krate":0,"index":1470},{"krate":0,"index":1490},{"krate":0,"index":1639},{"krate":0,"index":1763}],"decl_id":null,"docs":" Decoding of netpbm image formats (pbm, pgm, ppm and pam).","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2402,"byte_end":2425,"line_start":95,"line_end":95,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1537},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":340104,"byte_end":340114,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"PNMDecoder","qualname":"::pnm::decoder::PNMDecoder","value":"PNMDecoder {  }","parent":null,"children":[{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1541}],"decl_id":null,"docs":" PNM decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":340304,"byte_end":340307,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<PNMDecoder<R>>::new","value":"fn (read: R) -> ImageResult<PNMDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```read```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1545},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":341776,"byte_end":341786,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<PNMDecoder<R>>::into_inner","value":"fn (self) -> (R, PNMHeader)","parent":null,"children":[],"decl_id":null,"docs":" Extract the reader and header after an image has been read.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1574},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":353483,"byte_end":353492,"line_start":412,"line_end":412,"column_start":12,"column_end":21},"name":"PnmReader","qualname":"::pnm::decoder::PnmReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1599},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":356050,"byte_end":356057,"line_start":484,"line_end":484,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PNMDecoder<R>>::subtype","value":"fn (&self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Get the pnm subtype, depending on the magic constant contained in the header\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3377},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":376343,"byte_end":376345,"line_start":22,"line_end":22,"column_start":5,"column_end":7},"name":"U8","qualname":"::pnm::encoder::FlatSamples::U8","value":"FlatSamples::U8(&'a [u8])","parent":{"krate":0,"index":3375},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3380},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":376361,"byte_end":376364,"line_start":23,"line_end":23,"column_start":5,"column_end":8},"name":"U16","qualname":"::pnm::encoder::FlatSamples::U16","value":"FlatSamples::U16(&'a [u16])","parent":{"krate":0,"index":3375},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3375},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":376321,"byte_end":376332,"line_start":21,"line_end":21,"column_start":10,"column_end":21},"name":"FlatSamples","qualname":"::pnm::encoder::FlatSamples","value":"FlatSamples::{U8, U16}","parent":null,"children":[{"krate":0,"index":3377},{"krate":0,"index":3380}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":376312,"byte_end":376378,"line_start":21,"line_end":24,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1670},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":376445,"byte_end":376455,"line_start":27,"line_end":27,"column_start":12,"column_end":22},"name":"PNMEncoder","qualname":"::pnm::encoder::PNMEncoder","value":"PNMEncoder {  }","parent":null,"children":[{"krate":0,"index":1672},{"krate":0,"index":1673}],"decl_id":null,"docs":" Encodes images to any of the `pnm` image formats.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":377829,"byte_end":377832,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<PNMEncoder<W>>::new","value":"fn (writer: W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new PNMEncoder from the `writer`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1709},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":378382,"byte_end":378394,"line_start":96,"line_end":96,"column_start":12,"column_end":24},"name":"with_subtype","qualname":"<PNMEncoder<W>>::with_subtype","value":"fn (self, subtype: PNMSubtype) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encode a specific pnm subtype image.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1710},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":379100,"byte_end":379111,"line_start":112,"line_end":112,"column_start":12,"column_end":23},"name":"with_header","qualname":"<PNMEncoder<W>>::with_header","value":"fn (self, header: PNMHeader) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enforce the use of a chosen header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1711},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":379682,"byte_end":379701,"line_start":126,"line_end":126,"column_start":12,"column_end":31},"name":"with_dynamic_header","qualname":"<PNMEncoder<W>>::with_dynamic_header","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create the header dynamically for each image.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":380077,"byte_end":380083,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"name":"encode","qualname":"<PNMEncoder<W>>::encode","value":"fn <'s, S> (&mut self, image: S, width: u32, height: u32, color: ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode an image whose samples are represented as `u8`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3389},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":397838,"byte_end":397844,"line_start":7,"line_end":7,"column_start":5,"column_end":11},"name":"Binary","qualname":"::pnm::header::SampleEncoding::Binary","value":"SampleEncoding::Binary","parent":{"krate":0,"index":3388},"children":[],"decl_id":null,"docs":" Samples are unsigned binary integers in big endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3391},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":397928,"byte_end":397933,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::pnm::header::SampleEncoding::Ascii","value":"SampleEncoding::Ascii","parent":{"krate":0,"index":3388},"children":[],"decl_id":null,"docs":" Samples are encoded as decimal ascii strings separated by whitespace\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3388},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":397758,"byte_end":397772,"line_start":5,"line_end":5,"column_start":10,"column_end":24},"name":"SampleEncoding","qualname":"::pnm::header::SampleEncoding","value":"SampleEncoding::{Binary, Ascii}","parent":null,"children":[{"krate":0,"index":3389},{"krate":0,"index":3391}],"decl_id":null,"docs":" The kind of encoding used to store sample values\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":397749,"byte_end":397936,"line_start":5,"line_end":11,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":397749,"byte_end":397936,"line_start":5,"line_end":11,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3403},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":398086,"byte_end":398092,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Bitmap","qualname":"::pnm::header::PNMSubtype::Bitmap","value":"PNMSubtype::Bitmap(SampleEncoding)","parent":{"krate":0,"index":3402},"children":[],"decl_id":null,"docs":" Magic numbers P1 and P4\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3406},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":398147,"byte_end":398154,"line_start":20,"line_end":20,"column_start":5,"column_end":12},"name":"Graymap","qualname":"::pnm::header::PNMSubtype::Graymap","value":"PNMSubtype::Graymap(SampleEncoding)","parent":{"krate":0,"index":3402},"children":[],"decl_id":null,"docs":" Magic numbers P2 and P5\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3409},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":398209,"byte_end":398215,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Pixmap","qualname":"::pnm::header::PNMSubtype::Pixmap","value":"PNMSubtype::Pixmap(SampleEncoding)","parent":{"krate":0,"index":3402},"children":[],"decl_id":null,"docs":" Magic numbers P3 and P6\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3412},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":398262,"byte_end":398274,"line_start":26,"line_end":26,"column_start":5,"column_end":17},"name":"ArbitraryMap","qualname":"::pnm::header::PNMSubtype::ArbitraryMap","value":"PNMSubtype::ArbitraryMap","parent":{"krate":0,"index":3402},"children":[],"decl_id":null,"docs":" Magic number P7\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3402},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":398037,"byte_end":398047,"line_start":15,"line_end":15,"column_start":10,"column_end":20},"name":"PNMSubtype","qualname":"::pnm::header::PNMSubtype","value":"PNMSubtype::{Bitmap, Graymap, Pixmap, ArbitraryMap}","parent":null,"children":[{"krate":0,"index":3403},{"krate":0,"index":3406},{"krate":0,"index":3409},{"krate":0,"index":3412}],"decl_id":null,"docs":" Denotes the category of the magic number\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":398028,"byte_end":398277,"line_start":15,"line_end":27,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":398028,"byte_end":398277,"line_start":15,"line_end":27,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1765},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":398666,"byte_end":398675,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"PNMHeader","qualname":"::pnm::header::PNMHeader","value":"PNMHeader {  }","parent":null,"children":[{"krate":0,"index":1766},{"krate":0,"index":1767}],"decl_id":null,"docs":" Stores the complete header data of a file.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3424},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399004,"byte_end":399016,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"BitmapHeader","qualname":"::pnm::header::BitmapHeader","value":"BitmapHeader { encoding, height, width }","parent":null,"children":[{"krate":0,"index":3425},{"krate":0,"index":3426},{"krate":0,"index":3427}],"decl_id":null,"docs":" Header produced by a `pbm` file (\"Portable Bit Map\")\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":398993,"byte_end":399199,"line_start":49,"line_end":58,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":3425},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399064,"byte_end":399072,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::BitmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":3424},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3426},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399132,"byte_end":399138,"line_start":54,"line_end":54,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::BitmapHeader::height","value":"u32","parent":{"krate":0,"index":3424},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3427},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399186,"byte_end":399191,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::BitmapHeader::width","value":"u32","parent":{"krate":0,"index":3424},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3433},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399300,"byte_end":399313,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"GraymapHeader","qualname":"::pnm::header::GraymapHeader","value":"GraymapHeader { encoding, height, width, maxwhite }","parent":null,"children":[{"krate":0,"index":3434},{"krate":0,"index":3435},{"krate":0,"index":3436},{"krate":0,"index":3437}],"decl_id":null,"docs":" Header produced by a `pgm` file (\"Portable Gray Map\")\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399289,"byte_end":399566,"line_start":62,"line_end":74,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":3434},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399361,"byte_end":399369,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::GraymapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":3433},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3435},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399429,"byte_end":399435,"line_start":67,"line_end":67,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::GraymapHeader::height","value":"u32","parent":{"krate":0,"index":3433},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3436},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399483,"byte_end":399488,"line_start":70,"line_end":70,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::GraymapHeader::width","value":"u32","parent":{"krate":0,"index":3433},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3437},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399550,"byte_end":399558,"line_start":73,"line_end":73,"column_start":9,"column_end":17},"name":"maxwhite","qualname":"::pnm::header::GraymapHeader::maxwhite","value":"u32","parent":{"krate":0,"index":3433},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3443},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399668,"byte_end":399680,"line_start":78,"line_end":78,"column_start":12,"column_end":24},"name":"PixmapHeader","qualname":"::pnm::header::PixmapHeader","value":"PixmapHeader { encoding, height, width, maxval }","parent":null,"children":[{"krate":0,"index":3444},{"krate":0,"index":3445},{"krate":0,"index":3446},{"krate":0,"index":3447}],"decl_id":null,"docs":" Header produced by a `ppm` file (\"Portable Pixel Map\")\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399657,"byte_end":399931,"line_start":78,"line_end":90,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":3444},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399728,"byte_end":399736,"line_start":80,"line_end":80,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::PixmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":3443},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3445},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399796,"byte_end":399802,"line_start":83,"line_end":83,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::PixmapHeader::height","value":"u32","parent":{"krate":0,"index":3443},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3446},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399850,"byte_end":399855,"line_start":86,"line_end":86,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::PixmapHeader::width","value":"u32","parent":{"krate":0,"index":3443},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3447},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":399917,"byte_end":399923,"line_start":89,"line_end":89,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::PixmapHeader::maxval","value":"u32","parent":{"krate":0,"index":3443},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3453},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400031,"byte_end":400046,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"ArbitraryHeader","qualname":"::pnm::header::ArbitraryHeader","value":"ArbitraryHeader { height, width, depth, maxval, tupltype }","parent":null,"children":[{"krate":0,"index":3454},{"krate":0,"index":3455},{"krate":0,"index":3456},{"krate":0,"index":3457},{"krate":0,"index":3458}],"decl_id":null,"docs":" Header produced by a `pam` file (\"Portable Arbitrary Map\")\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3454},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400090,"byte_end":400096,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::ArbitraryHeader::height","value":"u32","parent":{"krate":0,"index":3453},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3455},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400144,"byte_end":400149,"line_start":99,"line_end":99,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::ArbitraryHeader::width","value":"u32","parent":{"krate":0,"index":3453},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3456},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400198,"byte_end":400203,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"name":"depth","qualname":"::pnm::header::ArbitraryHeader::depth","value":"u32","parent":{"krate":0,"index":3453},"children":[],"decl_id":null,"docs":" Number of color channels\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3457},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400265,"byte_end":400271,"line_start":105,"line_end":105,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::ArbitraryHeader::maxval","value":"u32","parent":{"krate":0,"index":3453},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3458},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400332,"byte_end":400340,"line_start":108,"line_end":108,"column_start":9,"column_end":17},"name":"tupltype","qualname":"::pnm::header::ArbitraryHeader::tupltype","value":"std::option::Option<pnm::header::ArbitraryTuplType>","parent":{"krate":0,"index":3453},"children":[],"decl_id":null,"docs":" Color interpretation of image pixels\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3464},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400543,"byte_end":400556,"line_start":115,"line_end":115,"column_start":5,"column_end":18},"name":"BlackAndWhite","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhite","value":"ArbitraryTuplType::BlackAndWhite","parent":{"krate":0,"index":3463},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3466},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400639,"byte_end":400657,"line_start":118,"line_end":118,"column_start":5,"column_end":23},"name":"BlackAndWhiteAlpha","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhiteAlpha","value":"ArbitraryTuplType::BlackAndWhiteAlpha","parent":{"krate":0,"index":3463},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1) and a second alpha channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3468},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400709,"byte_end":400718,"line_start":121,"line_end":121,"column_start":5,"column_end":14},"name":"Grayscale","qualname":"::pnm::header::ArbitraryTuplType::Grayscale","value":"ArbitraryTuplType::Grayscale","parent":{"krate":0,"index":3463},"children":[],"decl_id":null,"docs":" Pixels represent the amount of white\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3470},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400776,"byte_end":400790,"line_start":124,"line_end":124,"column_start":5,"column_end":19},"name":"GrayscaleAlpha","qualname":"::pnm::header::ArbitraryTuplType::GrayscaleAlpha","value":"ArbitraryTuplType::GrayscaleAlpha","parent":{"krate":0,"index":3463},"children":[],"decl_id":null,"docs":" Grayscale with an additional alpha channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3472},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400838,"byte_end":400841,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"RGB","qualname":"::pnm::header::ArbitraryTuplType::RGB","value":"ArbitraryTuplType::RGB","parent":{"krate":0,"index":3463},"children":[],"decl_id":null,"docs":" Three channels: Red, Green, Blue\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3474},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400895,"byte_end":400903,"line_start":130,"line_end":130,"column_start":5,"column_end":13},"name":"RGBAlpha","qualname":"::pnm::header::ArbitraryTuplType::RGBAlpha","value":"ArbitraryTuplType::RGBAlpha","parent":{"krate":0,"index":3463},"children":[],"decl_id":null,"docs":" Four channels: Red, Green, Blue, Alpha\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3476},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400960,"byte_end":400966,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Custom","qualname":"::pnm::header::ArbitraryTuplType::Custom","value":"ArbitraryTuplType::Custom(String)","parent":{"krate":0,"index":3463},"children":[],"decl_id":null,"docs":" An image format which is not standardized\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3463},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400470,"byte_end":400487,"line_start":113,"line_end":113,"column_start":10,"column_end":27},"name":"ArbitraryTuplType","qualname":"::pnm::header::ArbitraryTuplType","value":"ArbitraryTuplType::{BlackAndWhite, BlackAndWhiteAlpha, Grayscale, GrayscaleAlpha, RGB, RGBAlpha, Custom}","parent":null,"children":[{"krate":0,"index":3464},{"krate":0,"index":3466},{"krate":0,"index":3468},{"krate":0,"index":3470},{"krate":0,"index":3472},{"krate":0,"index":3474},{"krate":0,"index":3476}],"decl_id":null,"docs":" Standardized tuple type specifiers in the header of a `pam`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1782},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":401087,"byte_end":401101,"line_start":138,"line_end":138,"column_start":12,"column_end":26},"name":"magic_constant","qualname":"<PNMSubtype>::magic_constant","value":"fn (self) -> &'static [u8; 2]","parent":null,"children":[],"decl_id":null,"docs":" Get the two magic constant bytes corresponding to this format subtype.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":401680,"byte_end":401695,"line_start":151,"line_end":151,"column_start":12,"column_end":27},"name":"sample_encoding","qualname":"<PNMSubtype>::sample_encoding","value":"fn (self) -> SampleEncoding","parent":null,"children":[],"decl_id":null,"docs":" Whether samples are stored as binary or as decimal ascii\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1786},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":402058,"byte_end":402065,"line_start":163,"line_end":163,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PNMHeader>::subtype","value":"fn (&self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the format subtype from which the header was created.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1787},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":402580,"byte_end":402585,"line_start":173,"line_end":173,"column_start":12,"column_end":17},"name":"width","qualname":"<PNMHeader>::width","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of the image this header is for.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":403003,"byte_end":403009,"line_start":183,"line_end":183,"column_start":12,"column_end":18},"name":"height","qualname":"<PNMHeader>::height","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of the image this header is for.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1789},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":403467,"byte_end":403481,"line_start":193,"line_end":193,"column_start":12,"column_end":26},"name":"maximal_sample","qualname":"<PNMHeader>::maximal_sample","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The biggest value a sample can have. In other words, the colour resolution.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1790},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":403899,"byte_end":403908,"line_start":203,"line_end":203,"column_start":12,"column_end":21},"name":"as_bitmap","qualname":"<PNMHeader>::as_bitmap","value":"fn (&self) -> Option<&BitmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying bitmap header if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1791},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":404139,"byte_end":404149,"line_start":211,"line_end":211,"column_start":12,"column_end":22},"name":"as_graymap","qualname":"<PNMHeader>::as_graymap","value":"fn (&self) -> Option<&GraymapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying graymap header if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1792},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":404383,"byte_end":404392,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"as_pixmap","qualname":"<PNMHeader>::as_pixmap","value":"fn (&self) -> Option<&PixmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying pixmap header if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1793},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":404625,"byte_end":404637,"line_start":227,"line_end":227,"column_start":12,"column_end":24},"name":"as_arbitrary","qualname":"<PNMHeader>::as_arbitrary","value":"fn (&self) -> Option<&ArbitraryHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying arbitrary header if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":404877,"byte_end":404882,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"write","qualname":"<PNMHeader>::write","value":"fn (&self, writer: &mut dyn io::Write) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write the header back into a binary stream\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1803},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tga","qualname":"::tga","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\mod.rs","parent":null,"children":[{"krate":0,"index":1804},{"krate":0,"index":1805}],"decl_id":null,"docs":" Decoding of TGA Images","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2439,"byte_end":2462,"line_start":97,"line_end":97,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1858},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":413568,"byte_end":413578,"line_start":156,"line_end":156,"column_start":12,"column_end":22},"name":"TGADecoder","qualname":"::tga::decoder::TGADecoder","value":"TGADecoder {  }","parent":null,"children":[{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":1863},{"krate":0,"index":1864},{"krate":0,"index":1865},{"krate":0,"index":1866},{"krate":0,"index":1867},{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1870}],"decl_id":null,"docs":" The representation of a TGA decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1873},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":414004,"byte_end":414007,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<TGADecoder<R>>::new","value":"fn (r: R) -> ImageResult<TGADecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1898},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":426216,"byte_end":426225,"line_start":532,"line_end":532,"column_start":12,"column_end":21},"name":"TGAReader","qualname":"::tga::decoder::TGAReader","value":"TGAReader {  }","parent":null,"children":[{"krate":0,"index":1900},{"krate":0,"index":1901}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1906},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tiff","qualname":"::tiff","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","parent":null,"children":[{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1927},{"krate":0,"index":1930},{"krate":0,"index":1932},{"krate":0,"index":1934},{"krate":0,"index":1939},{"krate":0,"index":1943},{"krate":0,"index":1951},{"krate":0,"index":1954}],"decl_id":null,"docs":" Decoding and Encoding of TIFF Images","sig":null,"attributes":[{"value":"cfg(feature = \"tiff\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2476,"byte_end":2500,"line_start":99,"line_end":99,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1922},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":427052,"byte_end":427063,"line_start":20,"line_end":20,"column_start":12,"column_end":23},"name":"TIFFDecoder","qualname":"::tiff::TIFFDecoder","value":"TIFFDecoder {  }","parent":null,"children":[{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926}],"decl_id":null,"docs":" Decoder for TIFF images.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1929},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":427284,"byte_end":427287,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<TIFFDecoder<R>>::new","value":"fn (r: R) -> Result<TIFFDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new TIFFDecoder.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1934},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":428668,"byte_end":428678,"line_start":70,"line_end":70,"column_start":12,"column_end":22},"name":"TiffReader","qualname":"::tiff::TiffReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1951},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":429813,"byte_end":429824,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"TiffEncoder","qualname":"::tiff::TiffEncoder","value":"TiffEncoder {  }","parent":null,"children":[{"krate":0,"index":1953}],"decl_id":null,"docs":" Encoder for tiff images\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1956},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":429952,"byte_end":429955,"line_start":115,"line_end":115,"column_start":12,"column_end":15},"name":"new","qualname":"<TiffEncoder<W>>::new","value":"fn (w: W) -> TiffEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1957},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":430195,"byte_end":430201,"line_start":124,"line_end":124,"column_start":12,"column_end":18},"name":"encode","qualname":"<TiffEncoder<W>>::encode","value":"fn (self, data: &[u8], width: u32, height: u32, color: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `image`\n that has dimensions `width` and `height`\n and `ColorType` `c`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1958},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"webp","qualname":"::webp","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\mod.rs","parent":null,"children":[{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":2006},{"krate":0,"index":2012}],"decl_id":null,"docs":" Decoding of Webp Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"webp\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2515,"byte_end":2539,"line_start":101,"line_end":101,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1977},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\decoder.rs","byte_start":431363,"byte_end":431374,"line_start":18,"line_end":18,"column_start":12,"column_end":23},"name":"WebpDecoder","qualname":"::webp::decoder::WebpDecoder","value":"WebpDecoder {  }","parent":null,"children":[{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1981}],"decl_id":null,"docs":" Webp Image format decoder. Currently only supportes the luma channel (meaning that decoded\n images will be grayscale).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1984},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\decoder.rs","byte_start":431586,"byte_end":431589,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<WebpDecoder<R>>::new","value":"fn (r: R) -> ImageResult<WebpDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WebpDecoder from the Reader ```r```.\n This function takes ownership of the Reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1989},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\decoder.rs","byte_start":433571,"byte_end":433581,"line_start":103,"line_end":103,"column_start":12,"column_end":22},"name":"WebpReader","qualname":"::webp::decoder::WebpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2012},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vp8","qualname":"::webp::vp8","value":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","parent":null,"children":[{"krate":0,"index":2013},{"krate":0,"index":2016},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":2020},{"krate":0,"index":2023},{"krate":0,"index":2024},{"krate":0,"index":2025},{"krate":0,"index":2026},{"krate":0,"index":2027},{"krate":0,"index":2028},{"krate":0,"index":2029},{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2033},{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":2036},{"krate":0,"index":2037},{"krate":0,"index":2038},{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":3498},{"krate":0,"index":3521},{"krate":0,"index":3520},{"krate":0,"index":3518},{"krate":0,"index":3516},{"krate":0,"index":3514},{"krate":0,"index":3523},{"krate":0,"index":3543},{"krate":0,"index":3542},{"krate":0,"index":3540},{"krate":0,"index":3538},{"krate":0,"index":3536},{"krate":0,"index":3545},{"krate":0,"index":3583},{"krate":0,"index":3582},{"krate":0,"index":3580},{"krate":0,"index":3578},{"krate":0,"index":3576},{"krate":0,"index":2041},{"krate":0,"index":2042},{"krate":0,"index":2044},{"krate":0,"index":2046},{"krate":0,"index":2048},{"krate":0,"index":2050},{"krate":0,"index":2054},{"krate":0,"index":2056},{"krate":0,"index":2058},{"krate":0,"index":2063},{"krate":0,"index":2064},{"krate":0,"index":2065},{"krate":0,"index":2066},{"krate":0,"index":2067},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2079},{"krate":0,"index":2082},{"krate":0,"index":2084},{"krate":0,"index":2086},{"krate":0,"index":2088},{"krate":0,"index":2090},{"krate":0,"index":2092},{"krate":0,"index":2098},{"krate":0,"index":3585},{"krate":0,"index":3598},{"krate":0,"index":3594},{"krate":0,"index":3593},{"krate":0,"index":3600},{"krate":0,"index":3615},{"krate":0,"index":3613},{"krate":0,"index":3611},{"krate":0,"index":3617},{"krate":0,"index":3630},{"krate":0,"index":3629},{"krate":0,"index":3627},{"krate":0,"index":2106},{"krate":0,"index":2129},{"krate":0,"index":2155},{"krate":0,"index":2158},{"krate":0,"index":2160},{"krate":0,"index":2162},{"krate":0,"index":2164},{"krate":0,"index":2166},{"krate":0,"index":2168},{"krate":0,"index":2170},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2178},{"krate":0,"index":2179},{"krate":0,"index":2180},{"krate":0,"index":2181},{"krate":0,"index":2182},{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2186},{"krate":0,"index":2187},{"krate":0,"index":2188},{"krate":0,"index":2189},{"krate":0,"index":2190},{"krate":0,"index":2191},{"krate":0,"index":2192},{"krate":0,"index":2193}],"decl_id":null,"docs":" An implementation of the VP8 Video Codec","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3600},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":465790,"byte_end":465795,"line_start":789,"line_end":789,"column_start":12,"column_end":17},"name":"Frame","qualname":"::webp::vp8::Frame","value":"Frame { width, height, ybuf, keyframe, for_display, pixel_type }","parent":null,"children":[{"krate":0,"index":3601},{"krate":0,"index":3602},{"krate":0,"index":3603},{"krate":0,"index":3604},{"krate":0,"index":3605},{"krate":0,"index":3606},{"krate":0,"index":3607},{"krate":0,"index":3608},{"krate":0,"index":3609},{"krate":0,"index":3610}],"decl_id":null,"docs":" A Representation of the last decoded video frame\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3601},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":465842,"byte_end":465847,"line_start":791,"line_end":791,"column_start":9,"column_end":14},"name":"width","qualname":"::webp::vp8::Frame::width","value":"u16","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":" The width of the luma plane\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3602},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":465900,"byte_end":465906,"line_start":794,"line_end":794,"column_start":9,"column_end":15},"name":"height","qualname":"::webp::vp8::Frame::height","value":"u16","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":" The height of the luma plane\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3603},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":465958,"byte_end":465962,"line_start":797,"line_end":797,"column_start":9,"column_end":13},"name":"ybuf","qualname":"::webp::vp8::Frame::ybuf","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":" The luma plane of the frame\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3604},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":466033,"byte_end":466041,"line_start":800,"line_end":800,"column_start":9,"column_end":17},"name":"keyframe","qualname":"::webp::vp8::Frame::keyframe","value":"bool","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":" Indicates whether this frame is a keyframe\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3606},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":466137,"byte_end":466148,"line_start":805,"line_end":805,"column_start":9,"column_end":20},"name":"for_display","qualname":"::webp::vp8::Frame::for_display","value":"bool","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":" Indicates whether this frame is intended for display\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3607},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":466279,"byte_end":466289,"line_start":810,"line_end":810,"column_start":9,"column_end":19},"name":"pixel_type","qualname":"::webp::vp8::Frame::pixel_type","value":"u8","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":" The pixel type of the frame as defined by Section 9.2\n of the VP8 Specification\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2106},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":466665,"byte_end":466675,"line_start":838,"line_end":838,"column_start":12,"column_end":22},"name":"VP8Decoder","qualname":"::webp::vp8::VP8Decoder","value":"VP8Decoder {  }","parent":null,"children":[{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2110},{"krate":0,"index":2111},{"krate":0,"index":2112},{"krate":0,"index":2113},{"krate":0,"index":2114},{"krate":0,"index":2115},{"krate":0,"index":2117},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2126},{"krate":0,"index":2127},{"krate":0,"index":2128}],"decl_id":null,"docs":" VP8 Decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2131},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":467339,"byte_end":467342,"line_start":873,"line_end":873,"column_start":12,"column_end":15},"name":"new","qualname":"<VP8Decoder<R>>::new","value":"fn (r: R) -> VP8Decoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder.\n The reader must present a raw vp8 bitstream to the decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2153},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":487151,"byte_end":487163,"line_start":1486,"line_end":1486,"column_start":12,"column_end":24},"name":"decode_frame","qualname":"<VP8Decoder<R>>::decode_frame","value":"fn (&mut self) -> ImageResult<&Frame>","parent":null,"children":[],"decl_id":null,"docs":" Decodes the current frame and returns a reference to it\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2199},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":504425,"byte_end":504431,"line_start":9,"line_end":9,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":2201}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2204},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":504611,"byte_end":504614,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"fn (iterator: Box<dyn Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2205},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":505007,"byte_end":505021,"line_start":24,"line_end":24,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"fn (self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.\n \n Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3632},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":505310,"byte_end":505315,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":3633},{"krate":0,"index":3634},{"krate":0,"index":3635},{"krate":0,"index":3636}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2211},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":505522,"byte_end":505525,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"fn (buffer: RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2212},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":505734,"byte_end":505744,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"fn (buffer: RgbaImage, left: u32, top: u32, delay: Ratio<u16>) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2213},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":505961,"byte_end":505966,"line_start":70,"line_end":70,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"fn (&self) -> Ratio<u16>","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2214},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":506060,"byte_end":506066,"line_start":75,"line_end":75,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"fn (&self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2215},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":506162,"byte_end":506173,"line_start":80,"line_end":80,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"fn (self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2216},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":506262,"byte_end":506266,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2217},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":506348,"byte_end":506351,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2253},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":506971,"byte_end":506976,"line_start":18,"line_end":18,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::buffer::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":2254},{"krate":0,"index":2255},{"krate":0,"index":2256},{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2259},{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2262},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2275},{"krate":0,"index":2277},{"krate":0,"index":2280},{"krate":0,"index":2283},{"krate":0,"index":2286},{"krate":0,"index":2289},{"krate":0,"index":2291},{"krate":0,"index":2293},{"krate":0,"index":2294}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2254},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":507040,"byte_end":507048,"line_start":20,"line_end":20,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::buffer::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2255},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":507123,"byte_end":507136,"line_start":23,"line_end":23,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::buffer::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2256},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":507279,"byte_end":507292,"line_start":26,"line_end":26,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::buffer::Pixel::channel_count","value":"fn () -> u8","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"deprecated(note = \"please use CHANNEL_COUNT associated constant\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":507205,"byte_end":507271,"line_start":25,"line_end":25,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2257},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":507388,"byte_end":507396,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"channels","qualname":"::buffer::Pixel::channels","value":"fn (&self) -> &[Self::Subpixel]","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2258},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":507484,"byte_end":507496,"line_start":34,"line_end":34,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::buffer::Pixel::channels_mut","value":"fn (&mut self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2259},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":507662,"byte_end":507673,"line_start":38,"line_end":38,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::buffer::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2260},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":507890,"byte_end":507901,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"color_model","qualname":"::buffer::Pixel::color_model","value":"fn () -> &'static str","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Returns a string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"deprecated(note = \"please use COLOR_MODEL associated constant\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":507818,"byte_end":507882,"line_start":41,"line_end":41,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":2261},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":508005,"byte_end":508015,"line_start":47,"line_end":47,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::buffer::Pixel::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" ColorType for this pixel format\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2262},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":508155,"byte_end":508165,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"color_type","qualname":"::buffer::Pixel::color_type","value":"fn () -> ColorType","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"deprecated(note = \"please use COLOR_TYPE associated constant\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":508084,"byte_end":508147,"line_start":49,"line_end":49,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2263},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":508403,"byte_end":508412,"line_start":58,"line_end":58,"column_start":8,"column_end":17},"name":"channels4","qualname":"::buffer::Pixel::channels4","value":"fn (&self) -> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2264},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":508715,"byte_end":508728,"line_start":71,"line_end":71,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::buffer::Pixel::from_channels","value":"fn (a: Self::Subpixel, b: Self::Subpixel, c: Self::Subpixel, d: Self::Subpixel) -> Self","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2265},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":509082,"byte_end":509092,"line_start":82,"line_end":82,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::buffer::Pixel::from_slice","value":"fn (slice: &[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2266},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":509372,"byte_end":509386,"line_start":88,"line_end":88,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::buffer::Pixel::from_slice_mut","value":"fn (slice: &mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2267},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":509473,"byte_end":509479,"line_start":91,"line_end":91,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::buffer::Pixel::to_rgb","value":"fn (&self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2268},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":509575,"byte_end":509582,"line_start":94,"line_end":94,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::buffer::Pixel::to_rgba","value":"fn (&self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2269},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":509658,"byte_end":509665,"line_start":97,"line_end":97,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::buffer::Pixel::to_luma","value":"fn (&self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2270},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":509763,"byte_end":509776,"line_start":100,"line_end":100,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::buffer::Pixel::to_luma_alpha","value":"fn (&self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2271},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":509852,"byte_end":509858,"line_start":103,"line_end":103,"column_start":8,"column_end":14},"name":"to_bgr","qualname":"::buffer::Pixel::to_bgr","value":"fn (&self) -> Bgr<Self::Subpixel>","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2272},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":509954,"byte_end":509961,"line_start":106,"line_end":106,"column_start":8,"column_end":15},"name":"to_bgra","qualname":"::buffer::Pixel::to_bgra","value":"fn (&self) -> Bgra<Self::Subpixel>","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2273},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":510068,"byte_end":510071,"line_start":109,"line_end":109,"column_start":8,"column_end":11},"name":"map","qualname":"::buffer::Pixel::map","value":"fn <F> (&self, f: F) -> Self","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2275},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":510232,"byte_end":510237,"line_start":114,"line_end":114,"column_start":8,"column_end":13},"name":"apply","qualname":"::buffer::Pixel::apply","value":"fn <F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2277},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":510462,"byte_end":510476,"line_start":120,"line_end":120,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::buffer::Pixel::map_with_alpha","value":"fn <F, G> (&self, f: F, g: G) -> Self","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2280},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":510782,"byte_end":510798,"line_start":127,"line_end":127,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::buffer::Pixel::apply_with_alpha","value":"fn <F, G> (&mut self, f: F, g: G) -> ()","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2283},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":511032,"byte_end":511049,"line_start":133,"line_end":133,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::buffer::Pixel::map_without_alpha","value":"fn <F> (&self, f: F) -> Self","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel. \n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2286},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":511344,"byte_end":511363,"line_start":144,"line_end":144,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::buffer::Pixel::apply_without_alpha","value":"fn <F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel. \n Works in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2289},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":511608,"byte_end":511612,"line_start":153,"line_end":153,"column_start":8,"column_end":12},"name":"map2","qualname":"::buffer::Pixel::map2","value":"fn <F> (&self, other: &Self, f: F) -> Self","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2291},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":511852,"byte_end":511858,"line_start":159,"line_end":159,"column_start":8,"column_end":14},"name":"apply2","qualname":"::buffer::Pixel::apply2","value":"fn <F> (&mut self, other: &Self, f: F) -> ()","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2293},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":512005,"byte_end":512011,"line_start":164,"line_end":164,"column_start":8,"column_end":14},"name":"invert","qualname":"::buffer::Pixel::invert","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":512122,"byte_end":512127,"line_start":167,"line_end":167,"column_start":8,"column_end":13},"name":"blend","qualname":"::buffer::Pixel::blend","value":"fn (&mut self, other: &Self) -> ()","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2295},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":512197,"byte_end":512203,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":2298}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2314},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":512972,"byte_end":512981,"line_start":210,"line_end":210,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":2317}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2333},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":513805,"byte_end":513809,"line_start":251,"line_end":251,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":2336}],"decl_id":null,"docs":" Iterate over rows of an image\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2352},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":514738,"byte_end":514745,"line_start":294,"line_end":294,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":2355}],"decl_id":null,"docs":" Iterate over mutable rows of an image\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2371},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":515705,"byte_end":515720,"line_start":337,"line_end":337,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":2374},{"krate":0,"index":2375},{"krate":0,"index":2376},{"krate":0,"index":2377}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2388},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":516468,"byte_end":516481,"line_start":375,"line_end":375,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":2391},{"krate":0,"index":2392},{"krate":0,"index":2393}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2404},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":517344,"byte_end":517362,"line_start":418,"line_end":418,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":2407},{"krate":0,"index":2408},{"krate":0,"index":2409},{"krate":0,"index":2410}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2421},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":518127,"byte_end":518143,"line_start":456,"line_end":456,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":2424},{"krate":0,"index":2425},{"krate":0,"index":2426}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3639},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":519028,"byte_end":519039,"line_start":500,"line_end":500,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":3642},{"krate":0,"index":3643},{"krate":0,"index":3644},{"krate":0,"index":3645}],"decl_id":null,"docs":" Generic image buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2440},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":519797,"byte_end":519805,"line_start":522,"line_end":522,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"fn (width: u32, height: u32, buf: Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2441},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":520211,"byte_end":520219,"line_start":536,"line_end":536,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"fn (self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2442},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":520321,"byte_end":520331,"line_start":541,"line_end":541,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"fn (&self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2443},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":520440,"byte_end":520445,"line_start":546,"line_end":546,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2444},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":520533,"byte_end":520539,"line_start":551,"line_end":551,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2445},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":520653,"byte_end":520659,"line_start":556,"line_end":556,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"fn (&self) -> Pixels<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2446},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":520860,"byte_end":520864,"line_start":563,"line_end":563,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"fn (&self) -> Rows<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2447},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":521207,"byte_end":521223,"line_start":574,"line_end":574,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"fn (&self) -> EnumeratePixels<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2448},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":521555,"byte_end":521569,"line_start":586,"line_end":586,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"fn (&self) -> EnumerateRows<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2449},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":521890,"byte_end":521899,"line_start":599,"line_end":599,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"fn (&self, x: u32, y: u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2457},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":523625,"byte_end":523638,"line_start":640,"line_end":640,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"fn (&self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2458},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":524252,"byte_end":524269,"line_start":651,"line_end":651,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"fn (self) -> FlatSamples<Container>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2459},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":524716,"byte_end":524731,"line_start":666,"line_end":666,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"fn (&self) -> FlatSamples<&[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2463},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":525251,"byte_end":525261,"line_start":685,"line_end":685,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"fn (&mut self) -> PixelsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2464},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":525484,"byte_end":525492,"line_start":692,"line_end":692,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"fn (&mut self) -> RowsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2465},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":525857,"byte_end":525877,"line_start":703,"line_end":703,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"fn (&mut self) -> EnumeratePixelsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2466},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":526251,"byte_end":526269,"line_start":716,"line_end":716,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"fn (&mut self) -> EnumerateRowsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2467},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":526632,"byte_end":526645,"line_start":730,"line_end":730,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"fn (&mut self, x: u32, y: u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2468},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":527094,"byte_end":527103,"line_start":742,"line_end":742,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2472},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":527518,"byte_end":527522,"line_start":756,"line_end":756,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"fn <Q> (&self, path: Q) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2477},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":528155,"byte_end":528171,"line_start":781,"line_end":781,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"fn <Q> (&self, path: Q, format: ImageFormat) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":532583,"byte_end":532586,"line_start":944,"line_end":944,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<<P>::Subpixel>>>::new","value":"fn (width: u32, height: u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2523},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":533124,"byte_end":533134,"line_start":960,"line_end":960,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<<P>::Subpixel>>>::from_pixel","value":"fn (width: u32, height: u32, pixel: P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2524},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":533649,"byte_end":533656,"line_start":975,"line_end":975,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<<P>::Subpixel>>>::from_fn","value":"fn <F> (width: u32, height: u32, mut f: F) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2526},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":534067,"byte_end":534075,"line_start":988,"line_end":988,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<<P>::Subpixel>>>::from_vec","value":"fn (width: u32, height: u32, buf: Vec<P::Subpixel>) -> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2527},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":534362,"byte_end":534370,"line_start":998,"line_end":998,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<<P>::Subpixel>>>::into_vec","value":"fn (self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2528},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":534498,"byte_end":534511,"line_start":1004,"line_end":1004,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":2530}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2530},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":534698,"byte_end":534705,"line_start":1009,"line_end":1009,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer::ConvertBuffer::convert","value":"fn (&self) -> T","parent":{"krate":0,"index":2528},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2532},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":534973,"byte_end":534987,"line_start":1017,"line_end":1017,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"fn (self, palette: &[(u8, u8, u8)], transparent_idx: Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2541},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":536731,"byte_end":536739,"line_start":1069,"line_end":1069,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2542},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":536828,"byte_end":536837,"line_start":1071,"line_end":1071,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2543},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":536917,"byte_end":536926,"line_start":1073,"line_end":1073,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2544},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":537022,"byte_end":537036,"line_start":1075,"line_end":1075,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3651},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":540912,"byte_end":540916,"line_start":12,"line_end":12,"column_start":5,"column_end":9},"name":"Gray","qualname":"::color::ColorType::Gray","value":"ColorType::Gray(u8)","parent":{"krate":0,"index":3650},"children":[],"decl_id":null,"docs":" Pixel is grayscale\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3654},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":540970,"byte_end":540973,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"RGB","qualname":"::color::ColorType::RGB","value":"ColorType::RGB(u8)","parent":{"krate":0,"index":3650},"children":[],"decl_id":null,"docs":" Pixel contains R, G and B channels\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3657},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":541031,"byte_end":541038,"line_start":18,"line_end":18,"column_start":5,"column_end":12},"name":"Palette","qualname":"::color::ColorType::Palette","value":"ColorType::Palette(u8)","parent":{"krate":0,"index":3650},"children":[],"decl_id":null,"docs":" Pixel is an index into a color palette\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3660},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":541098,"byte_end":541103,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"name":"GrayA","qualname":"::color::ColorType::GrayA","value":"ColorType::GrayA(u8)","parent":{"krate":0,"index":3650},"children":[],"decl_id":null,"docs":" Pixel is grayscale with an alpha channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3663},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":541157,"byte_end":541161,"line_start":24,"line_end":24,"column_start":5,"column_end":9},"name":"RGBA","qualname":"::color::ColorType::RGBA","value":"ColorType::RGBA(u8)","parent":{"krate":0,"index":3650},"children":[],"decl_id":null,"docs":" Pixel is RGB with an alpha channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3666},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":541215,"byte_end":541218,"line_start":27,"line_end":27,"column_start":5,"column_end":8},"name":"BGR","qualname":"::color::ColorType::BGR","value":"ColorType::BGR(u8)","parent":{"krate":0,"index":3650},"children":[],"decl_id":null,"docs":" Pixel contains B, G and R channels\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3669},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":541272,"byte_end":541276,"line_start":30,"line_end":30,"column_start":5,"column_end":9},"name":"BGRA","qualname":"::color::ColorType::BGRA","value":"ColorType::BGRA(u8)","parent":{"krate":0,"index":3650},"children":[],"decl_id":null,"docs":" Pixel is BGR with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3650},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":540869,"byte_end":540878,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"ColorType::{Gray, RGB, Palette, GrayA, RGBA, BGR, BGRA}","parent":null,"children":[{"krate":0,"index":3651},{"krate":0,"index":3654},{"krate":0,"index":3657},{"krate":0,"index":3660},{"krate":0,"index":3663},{"krate":0,"index":3666},{"krate":0,"index":3669}],"decl_id":null,"docs":" An enumeration over supported color types and their bit depths\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":540860,"byte_end":541284,"line_start":10,"line_end":32,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":540860,"byte_end":541284,"line_start":10,"line_end":32,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3937},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":546237,"byte_end":546240,"line_start":219,"line_end":219,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542303,"byte_end":542313,"line_start":69,"line_end":69,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542314,"byte_end":542336,"line_start":70,"line_end":70,"column_start":1,"column_end":23}},{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542337,"byte_end":542390,"line_start":71,"line_end":71,"column_start":1,"column_end":54}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542337,"byte_end":542390,"line_start":71,"line_end":71,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":3962},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":546287,"byte_end":546290,"line_start":220,"line_end":220,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542303,"byte_end":542313,"line_start":69,"line_end":69,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542314,"byte_end":542336,"line_start":70,"line_end":70,"column_start":1,"column_end":23}},{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542337,"byte_end":542390,"line_start":71,"line_end":71,"column_start":1,"column_end":54}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542337,"byte_end":542390,"line_start":71,"line_end":71,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":3987},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":546337,"byte_end":546341,"line_start":221,"line_end":221,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542303,"byte_end":542313,"line_start":69,"line_end":69,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542314,"byte_end":542336,"line_start":70,"line_end":70,"column_start":1,"column_end":23}},{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542337,"byte_end":542390,"line_start":71,"line_end":71,"column_start":1,"column_end":54}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542337,"byte_end":542390,"line_start":71,"line_end":71,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":4012},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":546393,"byte_end":546397,"line_start":222,"line_end":222,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542303,"byte_end":542313,"line_start":69,"line_end":69,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542314,"byte_end":542336,"line_start":70,"line_end":70,"column_start":1,"column_end":23}},{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542337,"byte_end":542390,"line_start":71,"line_end":71,"column_start":1,"column_end":54}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542337,"byte_end":542390,"line_start":71,"line_end":71,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":4037},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":546462,"byte_end":546466,"line_start":223,"line_end":223,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542303,"byte_end":542313,"line_start":69,"line_end":69,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542314,"byte_end":542336,"line_start":70,"line_end":70,"column_start":1,"column_end":23}},{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542337,"byte_end":542390,"line_start":71,"line_end":71,"column_start":1,"column_end":54}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542337,"byte_end":542390,"line_start":71,"line_end":71,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":4062},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":546531,"byte_end":546536,"line_start":224,"line_end":224,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542303,"byte_end":542313,"line_start":69,"line_end":69,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542314,"byte_end":542336,"line_start":70,"line_end":70,"column_start":1,"column_end":23}},{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542337,"byte_end":542390,"line_start":71,"line_end":71,"column_start":1,"column_end":54}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":542337,"byte_end":542390,"line_start":71,"line_end":71,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":2560},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":546677,"byte_end":546686,"line_start":228,"line_end":228,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":2562}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2562},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":546776,"byte_end":546786,"line_start":230,"line_end":230,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"fn (&mut self, &Other) -> ()","parent":{"krate":0,"index":2560},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4088},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":569176,"byte_end":569186,"line_start":41,"line_end":41,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":4087},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4091},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":569262,"byte_end":569273,"line_start":44,"line_end":44,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":4087},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4094},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":569342,"byte_end":569351,"line_start":47,"line_end":47,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":4087},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4097},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":569425,"byte_end":569435,"line_start":50,"line_end":50,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":4087},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4100},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":569499,"byte_end":569508,"line_start":53,"line_end":53,"column_start":5,"column_end":14},"name":"ImageBgr8","qualname":"::dynimage::DynamicImage::ImageBgr8","value":"DynamicImage::ImageBgr8(BgrImage)","parent":{"krate":0,"index":4087},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4103},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":569582,"byte_end":569592,"line_start":56,"line_end":56,"column_start":5,"column_end":15},"name":"ImageBgra8","qualname":"::dynimage::DynamicImage::ImageBgra8","value":"DynamicImage::ImageBgra8(BgraImage)","parent":{"krate":0,"index":4087},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr with alpha\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4087},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":569110,"byte_end":569122,"line_start":39,"line_end":39,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"DynamicImage::{ImageLuma8, ImageLumaA8, ImageRgb8, ImageRgba8, ImageBgr8, ImageBgra8}","parent":null,"children":[{"krate":0,"index":4088},{"krate":0,"index":4091},{"krate":0,"index":4094},{"krate":0,"index":4097},{"krate":0,"index":4100},{"krate":0,"index":4103}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2741},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":572373,"byte_end":572382,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2742},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":572585,"byte_end":572596,"line_start":113,"line_end":113,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2743},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":572773,"byte_end":572781,"line_start":118,"line_end":118,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2744},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":572957,"byte_end":572966,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2745},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":573143,"byte_end":573152,"line_start":128,"line_end":128,"column_start":12,"column_end":21},"name":"new_bgra8","qualname":"<DynamicImage>::new_bgra8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGRA pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2746},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":573328,"byte_end":573336,"line_start":133,"line_end":133,"column_start":12,"column_end":20},"name":"new_bgr8","qualname":"<DynamicImage>::new_bgr8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGR pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2747},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":573500,"byte_end":573506,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"fn (&self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2748},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":573675,"byte_end":573682,"line_start":146,"line_end":146,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"fn (&self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2749},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":573852,"byte_end":573858,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"name":"to_bgr","qualname":"<DynamicImage>::to_bgr","value":"fn (&self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2750},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":574027,"byte_end":574034,"line_start":161,"line_end":161,"column_start":12,"column_end":19},"name":"to_bgra","qualname":"<DynamicImage>::to_bgra","value":"fn (&self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2751},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":574203,"byte_end":574210,"line_start":168,"line_end":168,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"fn (&self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2752},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":574380,"byte_end":574393,"line_start":175,"line_end":175,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"fn (&self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2753},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":574589,"byte_end":574593,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2754},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":574822,"byte_end":574829,"line_start":187,"line_end":187,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"fn (&self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2755},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":575044,"byte_end":575055,"line_start":195,"line_end":195,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"fn (&mut self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2756},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":575275,"byte_end":575282,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"as_bgr8","qualname":"<DynamicImage>::as_bgr8","value":"fn (&self) -> Option<&BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGR image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2757},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":575497,"byte_end":575508,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"as_mut_bgr8","qualname":"<DynamicImage>::as_mut_bgr8","value":"fn (&mut self) -> Option<&mut BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit BGR image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2758},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":575728,"byte_end":575736,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"fn (&self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2759},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":575954,"byte_end":575966,"line_start":228,"line_end":228,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"fn (&mut self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2760},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":576188,"byte_end":576196,"line_start":236,"line_end":236,"column_start":12,"column_end":20},"name":"as_bgra8","qualname":"<DynamicImage>::as_bgra8","value":"fn (&self) -> Option<&BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGRA image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2761},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":576414,"byte_end":576426,"line_start":244,"line_end":244,"column_start":12,"column_end":24},"name":"as_mut_bgra8","qualname":"<DynamicImage>::as_mut_bgra8","value":"fn (&mut self) -> Option<&mut BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2762},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":576653,"byte_end":576661,"line_start":252,"line_end":252,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"fn (&self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2763},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":576884,"byte_end":576896,"line_start":260,"line_end":260,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"fn (&mut self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2764},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":577145,"byte_end":577159,"line_start":268,"line_end":268,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"fn (&self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2765},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":577410,"byte_end":577428,"line_start":276,"line_end":276,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"fn (&mut self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2766},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":577660,"byte_end":577670,"line_start":284,"line_end":284,"column_start":12,"column_end":22},"name":"raw_pixels","qualname":"<DynamicImage>::raw_pixels","value":"fn (&self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2767},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":577786,"byte_end":577801,"line_start":289,"line_end":289,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<DynamicImage>::as_flat_samples","value":"fn (&self) -> FlatSamples<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2768},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":577949,"byte_end":577954,"line_start":294,"line_end":294,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"fn (&self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2769},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":578502,"byte_end":578511,"line_start":306,"line_end":306,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2770},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":579234,"byte_end":579240,"line_start":319,"line_end":319,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2771},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":579604,"byte_end":579610,"line_start":327,"line_end":327,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2772},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":580074,"byte_end":580086,"line_start":337,"line_end":337,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2773},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":580777,"byte_end":580786,"line_start":354,"line_end":354,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"fn (&self, nwidth: u32, nheight: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2774},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":581394,"byte_end":581409,"line_start":366,"line_end":366,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"fn (&self, nwidth: u32, nheight: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2775},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":581929,"byte_end":581943,"line_start":376,"line_end":376,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by ```nwidth``` and ```nheight```, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2776},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":582763,"byte_end":582767,"line_start":399,"line_end":399,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"fn (&self, sigma: f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2777},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":583145,"byte_end":583154,"line_start":408,"line_end":408,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"fn (&self, sigma: f32, threshold: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2778},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":583363,"byte_end":583372,"line_start":413,"line_end":413,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"fn (&self, kernel: &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2779},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":583782,"byte_end":583797,"line_start":424,"line_end":424,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"fn (&self, c: f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2780},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":584097,"byte_end":584105,"line_start":431,"line_end":431,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"fn (&self, value: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2781},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":584453,"byte_end":584462,"line_start":439,"line_end":439,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"fn (&self, value: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2782},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":584621,"byte_end":584626,"line_start":444,"line_end":444,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2783},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":584772,"byte_end":584777,"line_start":449,"line_end":449,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2784},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":584936,"byte_end":584944,"line_start":454,"line_end":454,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2785},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":585097,"byte_end":585106,"line_start":459,"line_end":459,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2786},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":585260,"byte_end":585269,"line_start":464,"line_end":464,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2787},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":585424,"byte_end":585432,"line_start":469,"line_end":469,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"fn <W, F> (&self, w: &mut W, format: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2790},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":588653,"byte_end":588657,"line_start":559,"line_end":559,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"fn <Q> (&self, path: Q) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2792},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":589028,"byte_end":589044,"line_start":573,"line_end":573,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"fn <Q> (&self, path: Q, format: ImageFormat) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2812},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":594808,"byte_end":594812,"line_start":737,"line_end":737,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"fn <P> (path: P) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2817},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":596224,"byte_end":596240,"line_start":780,"line_end":780,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"fn <P> (path: P) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the dimensions of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2822},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":598418,"byte_end":598429,"line_start":839,"line_end":839,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"fn <P> (path: P, buf: &[u8], width: u32, height: u32, color: color::ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2828},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":601023,"byte_end":601046,"line_start":906,"line_end":906,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"fn <P> (path: P, buf: &[u8], width: u32, height: u32, color: color::ColorType, format: ImageFormat) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2832},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":602560,"byte_end":602564,"line_start":952,"line_end":952,"column_start":8,"column_end":12},"name":"load","qualname":"::dynimage::load","value":"fn <R> (r: R, format: ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2836},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":604994,"byte_end":605010,"line_start":1007,"line_end":1007,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"fn (buffer: &[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2837},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":605195,"byte_end":605223,"line_start":1013,"line_end":1013,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"fn (buf: &[u8], format: ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":605170,"byte_end":605187,"line_start":1012,"line_end":1012,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":2838},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":605606,"byte_end":605618,"line_start":1023,"line_end":1023,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::dynimage::guess_format","value":"fn (buffer: &[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4109},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":610926,"byte_end":610937,"line_start":20,"line_end":20,"column_start":5,"column_end":16},"name":"FormatError","qualname":"::image::ImageError::FormatError","value":"ImageError::FormatError(String)","parent":{"krate":0,"index":4108},"children":[],"decl_id":null,"docs":" The Image is not formatted properly\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4112},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":611017,"byte_end":611031,"line_start":23,"line_end":23,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::image::ImageError::DimensionError","value":"ImageError::DimensionError","parent":{"krate":0,"index":4108},"children":[],"decl_id":null,"docs":" The Image's dimensions are either too small or too large\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4114},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":611093,"byte_end":611109,"line_start":26,"line_end":26,"column_start":5,"column_end":21},"name":"UnsupportedError","qualname":"::image::ImageError::UnsupportedError","value":"ImageError::UnsupportedError(String)","parent":{"krate":0,"index":4108},"children":[],"decl_id":null,"docs":" The Decoder does not support this image format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4117},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":611177,"byte_end":611193,"line_start":29,"line_end":29,"column_start":5,"column_end":21},"name":"UnsupportedColor","qualname":"::image::ImageError::UnsupportedColor","value":"ImageError::UnsupportedColor(ColorType)","parent":{"krate":0,"index":4108},"children":[],"decl_id":null,"docs":" The Decoder does not support this color type\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4120},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":611291,"byte_end":611304,"line_start":33,"line_end":33,"column_start":5,"column_end":18},"name":"NotEnoughData","qualname":"::image::ImageError::NotEnoughData","value":"ImageError::NotEnoughData","parent":{"krate":0,"index":4108},"children":[],"decl_id":null,"docs":" Not enough data was provided to the Decoder\n to decode the image\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4122},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":611366,"byte_end":611373,"line_start":36,"line_end":36,"column_start":5,"column_end":12},"name":"IoError","qualname":"::image::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":4108},"children":[],"decl_id":null,"docs":" An I/O Error occurred while decoding the image\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4125},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":611437,"byte_end":611445,"line_start":39,"line_end":39,"column_start":5,"column_end":13},"name":"ImageEnd","qualname":"::image::ImageError::ImageEnd","value":"ImageError::ImageEnd","parent":{"krate":0,"index":4108},"children":[],"decl_id":null,"docs":" The end of the image has been reached\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4127},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":611519,"byte_end":611537,"line_start":42,"line_end":42,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::image::ImageError::InsufficientMemory","value":"ImageError::InsufficientMemory","parent":{"krate":0,"index":4108},"children":[],"decl_id":null,"docs":" There is not enough memory to complete the given operation\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4108},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":610865,"byte_end":610875,"line_start":18,"line_end":18,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::image::ImageError","value":"ImageError::{FormatError, DimensionError, UnsupportedError, UnsupportedColor, NotEnoughData, IoError, ImageEnd, InsufficientMemory}","parent":null,"children":[{"krate":0,"index":4109},{"krate":0,"index":4112},{"krate":0,"index":4114},{"krate":0,"index":4117},{"krate":0,"index":4120},{"krate":0,"index":4122},{"krate":0,"index":4125},{"krate":0,"index":4127}],"decl_id":null,"docs":" An enumeration of Image errors\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2862},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":613699,"byte_end":613710,"line_start":107,"line_end":107,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::image::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4132},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":613946,"byte_end":613949,"line_start":114,"line_end":114,"column_start":5,"column_end":8},"name":"PNG","qualname":"::image::ImageFormat::PNG","value":"ImageFormat::PNG","parent":{"krate":0,"index":4131},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4134},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":613988,"byte_end":613992,"line_start":117,"line_end":117,"column_start":5,"column_end":9},"name":"JPEG","qualname":"::image::ImageFormat::JPEG","value":"ImageFormat::JPEG","parent":{"krate":0,"index":4131},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4136},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614030,"byte_end":614033,"line_start":120,"line_end":120,"column_start":5,"column_end":8},"name":"GIF","qualname":"::image::ImageFormat::GIF","value":"ImageFormat::GIF","parent":{"krate":0,"index":4131},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4138},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614072,"byte_end":614076,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"WEBP","qualname":"::image::ImageFormat::WEBP","value":"ImageFormat::WEBP","parent":{"krate":0,"index":4131},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4140},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614122,"byte_end":614125,"line_start":126,"line_end":126,"column_start":5,"column_end":8},"name":"PNM","qualname":"::image::ImageFormat::PNM","value":"ImageFormat::PNM","parent":{"krate":0,"index":4131},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4142},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614164,"byte_end":614168,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"TIFF","qualname":"::image::ImageFormat::TIFF","value":"ImageFormat::TIFF","parent":{"krate":0,"index":4131},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4144},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614206,"byte_end":614209,"line_start":132,"line_end":132,"column_start":5,"column_end":8},"name":"TGA","qualname":"::image::ImageFormat::TGA","value":"ImageFormat::TGA","parent":{"krate":0,"index":4131},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4146},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614247,"byte_end":614250,"line_start":135,"line_end":135,"column_start":5,"column_end":8},"name":"BMP","qualname":"::image::ImageFormat::BMP","value":"ImageFormat::BMP","parent":{"krate":0,"index":4131},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4148},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614288,"byte_end":614291,"line_start":138,"line_end":138,"column_start":5,"column_end":8},"name":"ICO","qualname":"::image::ImageFormat::ICO","value":"ImageFormat::ICO","parent":{"krate":0,"index":4131},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4150},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614338,"byte_end":614341,"line_start":141,"line_end":141,"column_start":5,"column_end":8},"name":"HDR","qualname":"::image::ImageFormat::HDR","value":"ImageFormat::HDR","parent":{"krate":0,"index":4131},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4131},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":613897,"byte_end":613908,"line_start":112,"line_end":112,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"ImageFormat::{PNG, JPEG, GIF, WEBP, PNM, TIFF, TGA, BMP, ICO, HDR}","parent":null,"children":[{"krate":0,"index":4132},{"krate":0,"index":4134},{"krate":0,"index":4136},{"krate":0,"index":4138},{"krate":0,"index":4140},{"krate":0,"index":4142},{"krate":0,"index":4144},{"krate":0,"index":4146},{"krate":0,"index":4148},{"krate":0,"index":4150}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":613888,"byte_end":614344,"line_start":112,"line_end":142,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":613888,"byte_end":614344,"line_start":112,"line_end":142,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4162},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614543,"byte_end":614546,"line_start":149,"line_end":149,"column_start":5,"column_end":8},"name":"PNG","qualname":"::image::ImageOutputFormat::PNG","value":"ImageOutputFormat::PNG","parent":{"krate":0,"index":4161},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png_codec\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614478,"byte_end":614507,"line_start":147,"line_end":147,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4164},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614637,"byte_end":614641,"line_start":153,"line_end":153,"column_start":5,"column_end":9},"name":"JPEG","qualname":"::image::ImageOutputFormat::JPEG","value":"ImageOutputFormat::JPEG(u8)","parent":{"krate":0,"index":4161},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614553,"byte_end":614577,"line_start":151,"line_end":151,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4167},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614723,"byte_end":614726,"line_start":157,"line_end":157,"column_start":5,"column_end":8},"name":"PNM","qualname":"::image::ImageOutputFormat::PNM","value":"ImageOutputFormat::PNM(PNMSubtype)","parent":{"krate":0,"index":4161},"children":[],"decl_id":null,"docs":" An Image in one of the PNM Formats\n","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614652,"byte_end":614675,"line_start":155,"line_end":155,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4170},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614810,"byte_end":614813,"line_start":161,"line_end":161,"column_start":5,"column_end":8},"name":"GIF","qualname":"::image::ImageOutputFormat::GIF","value":"ImageOutputFormat::GIF","parent":{"krate":0,"index":4161},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"gif_codec\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614745,"byte_end":614774,"line_start":159,"line_end":159,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4172},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614879,"byte_end":614882,"line_start":165,"line_end":165,"column_start":5,"column_end":8},"name":"ICO","qualname":"::image::ImageOutputFormat::ICO","value":"ImageOutputFormat::ICO","parent":{"krate":0,"index":4161},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614820,"byte_end":614843,"line_start":163,"line_end":163,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4174},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614948,"byte_end":614951,"line_start":169,"line_end":169,"column_start":5,"column_end":8},"name":"BMP","qualname":"::image::ImageOutputFormat::BMP","value":"ImageOutputFormat::BMP","parent":{"krate":0,"index":4161},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614889,"byte_end":614912,"line_start":167,"line_end":167,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4176},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":615203,"byte_end":615214,"line_start":174,"line_end":174,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":4161},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4161},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614454,"byte_end":614471,"line_start":146,"line_end":146,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"ImageOutputFormat::{PNG, JPEG, PNM, GIF, ICO, BMP, Unsupported}","parent":null,"children":[{"krate":0,"index":4162},{"krate":0,"index":4164},{"krate":0,"index":4167},{"krate":0,"index":4170},{"krate":0,"index":4172},{"krate":0,"index":4174},{"krate":0,"index":4176}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":614445,"byte_end":615225,"line_start":146,"line_end":175,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":4188},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":622516,"byte_end":622524,"line_start":355,"line_end":355,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":4189},{"krate":0,"index":4190}],"decl_id":null,"docs":" Represents the progress of an image operation.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":622505,"byte_end":622562,"line_start":355,"line_end":358,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":622505,"byte_end":622562,"line_start":355,"line_end":358,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":2883},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":622616,"byte_end":622628,"line_start":361,"line_end":361,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":2885},{"krate":0,"index":2886},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2890},{"krate":0,"index":2891},{"krate":0,"index":2892},{"krate":0,"index":2894}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2885},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":622705,"byte_end":622711,"line_start":363,"line_end":363,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":2883},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2886},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":622801,"byte_end":622811,"line_start":366,"line_end":366,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"fn (&self) -> (u64, u64)","parent":{"krate":0,"index":2883},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2887},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":622909,"byte_end":622918,"line_start":369,"line_end":369,"column_start":8,"column_end":17},"name":"colortype","qualname":"::image::ImageDecoder::colortype","value":"fn (&self) -> ColorType","parent":{"krate":0,"index":2883},"children":[],"decl_id":null,"docs":" Returns the color type of the image e.g. RGB(8) (8bit RGB)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2888},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":623211,"byte_end":623222,"line_start":374,"line_end":374,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"fn (self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":2883},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2889},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":623394,"byte_end":623403,"line_start":378,"line_end":378,"column_start":8,"column_end":17},"name":"row_bytes","qualname":"::image::ImageDecoder::row_bytes","value":"fn (&self) -> u64","parent":{"krate":0,"index":2883},"children":[],"decl_id":null,"docs":" Returns the number of bytes in a single row of the image. All decoders will pad image rows\n to a byte boundary.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2890},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":623577,"byte_end":623588,"line_start":383,"line_end":383,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"fn (&self) -> u64","parent":{"krate":0,"index":2883},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2891},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":623821,"byte_end":623835,"line_start":389,"line_end":389,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"fn (&self) -> u64","parent":{"krate":0,"index":2883},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2892},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":623937,"byte_end":623947,"line_start":394,"line_end":394,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"fn (self) -> ImageResult<Vec<u8>>","parent":{"krate":0,"index":2883},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2894},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":624159,"byte_end":624183,"line_start":400,"line_end":400,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"fn <F> (self, progress_callback: F) -> ImageResult<Vec<u8>>","parent":{"krate":0,"index":2883},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2896},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":625298,"byte_end":625313,"line_start":437,"line_end":437,"column_start":11,"column_end":26},"name":"ImageDecoderExt","qualname":"::image::ImageDecoderExt","value":"ImageDecoderExt<'a>: ImageDecoder<'a> + Sized","parent":null,"children":[{"krate":0,"index":2898},{"krate":0,"index":2900}],"decl_id":null,"docs":" ImageDecoderExt trait\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2898},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":625402,"byte_end":625411,"line_start":439,"line_end":439,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderExt::read_rect","value":"fn (&mut self, x: u64, y: u64, width: u64, height: u64, buf: &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":2896},"children":[],"decl_id":null,"docs":" Read a rectangular section of the image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2900},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":625722,"byte_end":625745,"line_start":451,"line_end":451,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderExt::read_rect_with_progress","value":"fn <F> (&mut self, x: u64, y: u64, width: u64, height: u64, buf: &mut [u8], progress_callback: F) -> ImageResult<()>","parent":{"krate":0,"index":2896},"children":[],"decl_id":null,"docs":" Read a rectangular section of the image, periodically reporting progress.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2902},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":625976,"byte_end":625992,"line_start":463,"line_end":463,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":2904}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2904},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":626064,"byte_end":626075,"line_start":465,"line_end":465,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"fn (self) -> Frames<'a>","parent":{"krate":0,"index":2902},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2905},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":626140,"byte_end":626146,"line_start":469,"line_end":469,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":2908},{"krate":0,"index":2909},{"krate":0,"index":2910},{"krate":0,"index":2911},{"krate":0,"index":2912}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2918},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":626779,"byte_end":626795,"line_start":500,"line_end":500,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":2919},{"krate":0,"index":2920},{"krate":0,"index":2921},{"krate":0,"index":2922},{"krate":0,"index":2923},{"krate":0,"index":2924},{"krate":0,"index":2925},{"krate":0,"index":2926},{"krate":0,"index":2927},{"krate":0,"index":2928},{"krate":0,"index":2929},{"krate":0,"index":2930}],"decl_id":null,"docs":" Trait to inspect an image.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2919},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":626834,"byte_end":626839,"line_start":502,"line_end":502,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":2918},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2920},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":627073,"byte_end":627087,"line_start":507,"line_end":507,"column_start":10,"column_end":24},"name":"InnerImageView","qualname":"::image::GenericImageView::InnerImageView","value":"type InnerImageView: GenericImageView<Pixel = Self::Pixel>;","parent":{"krate":0,"index":2918},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2921},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":627180,"byte_end":627190,"line_start":510,"line_end":510,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"fn (&self) -> (u32, u32)","parent":{"krate":0,"index":2918},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2922},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":627254,"byte_end":627259,"line_start":513,"line_end":513,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"fn (&self) -> u32","parent":{"krate":0,"index":2918},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2923},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":627374,"byte_end":627380,"line_start":519,"line_end":519,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"fn (&self) -> u32","parent":{"krate":0,"index":2918},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2924},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":627507,"byte_end":627513,"line_start":525,"line_end":525,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"fn (&self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":2918},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2925},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":627630,"byte_end":627639,"line_start":528,"line_end":528,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"fn (&self, x: u32, y: u32) -> bool","parent":{"krate":0,"index":2918},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2926},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":627962,"byte_end":627971,"line_start":540,"line_end":540,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"fn (&self, x: u32, y: u32) -> Self::Pixel","parent":{"krate":0,"index":2918},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2927},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":628326,"byte_end":628342,"line_start":546,"line_end":546,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"fn (&self, x: u32, y: u32) -> Self::Pixel","parent":{"krate":0,"index":2918},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"deprecated =\n      \"Generally offers little advantage over get_pixel. If you must, prefer dedicated methods or other realizations on the specific image type instead.\"","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":628148,"byte_end":628311,"line_start":545,"line_end":545,"column_start":5,"column_end":168}}]},{"kind":"Method","id":{"krate":0,"index":2928},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":628574,"byte_end":628580,"line_start":553,"line_end":553,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"fn (&self) -> Pixels<Self>","parent":{"krate":0,"index":2918},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2929},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":628850,"byte_end":628855,"line_start":566,"line_end":566,"column_start":8,"column_end":13},"name":"inner","qualname":"::image::GenericImageView::inner","value":"fn (&self) -> &Self::InnerImageView","parent":{"krate":0,"index":2918},"children":[],"decl_id":null,"docs":" Returns a reference to the underlying image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2930},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":628968,"byte_end":628972,"line_start":569,"line_end":569,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"fn (&self, x: u32, y: u32, width: u32, height: u32) -> SubImage<&Self::InnerImageView>","parent":{"krate":0,"index":2918},"children":[],"decl_id":null,"docs":" Returns an subimage that is an immutable view into this image.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2931},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":629171,"byte_end":629183,"line_start":575,"line_end":575,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":2932},{"krate":0,"index":2933},{"krate":0,"index":2934},{"krate":0,"index":2935},{"krate":0,"index":2936},{"krate":0,"index":2937},{"krate":0,"index":2939},{"krate":0,"index":2940}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2932},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":629428,"byte_end":629438,"line_start":579,"line_end":579,"column_start":10,"column_end":20},"name":"InnerImage","qualname":"::image::GenericImage::InnerImage","value":"type InnerImage: GenericImage<Pixel = Self::Pixel>;","parent":{"krate":0,"index":2931},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2933},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":629628,"byte_end":629641,"line_start":586,"line_end":586,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"fn (&mut self, x: u32, y: u32) -> &mut Self::Pixel","parent":{"krate":0,"index":2931},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2934},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":629815,"byte_end":629824,"line_start":593,"line_end":593,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":2931},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2935},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":630184,"byte_end":630200,"line_start":599,"line_end":599,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":2931},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y)","sig":null,"attributes":[{"value":"deprecated =\n      \"Generally offers little advantage over put_pixel. If you must, prefer dedicated methods or other realizations on the specific image type instead.\"","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":630006,"byte_end":630169,"line_start":598,"line_end":598,"column_start":5,"column_end":168}}]},{"kind":"Method","id":{"krate":0,"index":2936},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":630467,"byte_end":630478,"line_start":606,"line_end":606,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":2931},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2937},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":630942,"byte_end":630951,"line_start":618,"line_end":618,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"fn <O> (&mut self, other: &O, x: u32, y: u32) -> bool","parent":{"krate":0,"index":2931},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2939},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":631583,"byte_end":631592,"line_start":638,"line_end":638,"column_start":8,"column_end":17},"name":"inner_mut","qualname":"::image::GenericImage::inner_mut","value":"fn (&mut self) -> &mut Self::InnerImage","parent":{"krate":0,"index":2931},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2940},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":631697,"byte_end":631706,"line_start":641,"line_end":641,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> SubImage<&mut Self::InnerImage>","parent":{"krate":0,"index":2931},"children":[],"decl_id":null,"docs":" Returns a subimage that is a view into this image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2941},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":631954,"byte_end":631962,"line_start":653,"line_end":653,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":2943},{"krate":0,"index":2944},{"krate":0,"index":2945},{"krate":0,"index":2946},{"krate":0,"index":2947}],"decl_id":null,"docs":" A View into another image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2954},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":632350,"byte_end":632353,"line_start":669,"line_end":669,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"fn (image: I, x: u32, y: u32, width: u32, height: u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2955},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":632642,"byte_end":632655,"line_start":680,"line_end":680,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2956},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":632889,"byte_end":632897,"line_start":688,"line_end":688,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"fn (&self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2980},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\traits.rs","byte_start":640601,"byte_end":640610,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2993},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\traits.rs","byte_start":641132,"byte_end":641143,"line_start":26,"line_end":26,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":2994},{"krate":0,"index":2995}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2994},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\traits.rs","byte_start":641182,"byte_end":641188,"line_start":27,"line_end":27,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Primitive + AddAssign + 'static;","parent":{"krate":0,"index":2993},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2995},"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\traits.rs","byte_start":641231,"byte_end":641241,"line_start":29,"line_end":29,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"fn (n: Self::Larger) -> Self","parent":{"krate":0,"index":2993},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\nq.rs","byte_start":5933,"byte_end":5941,"line_start":73,"line_end":73,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":37179,"byte_end":37186,"line_start":194,"line_end":194,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":37630,"byte_end":37638,"line_start":215,"line_end":215,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":50148,"byte_end":50160,"line_start":298,"line_end":298,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":70230,"byte_end":70242,"line_start":108,"line_end":108,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":381},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":82874,"byte_end":82877,"line_start":421,"line_end":421,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":83135,"byte_end":83146,"line_start":436,"line_end":436,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":411},{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":104904,"byte_end":104908,"line_start":971,"line_end":971,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":110479,"byte_end":110486,"line_start":1103,"line_end":1103,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":114863,"byte_end":114874,"line_start":1217,"line_end":1217,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":458},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":115483,"byte_end":115494,"line_start":1236,"line_end":1236,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":116098,"byte_end":116102,"line_start":1254,"line_end":1254,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":117357,"byte_end":117364,"line_start":1299,"line_end":1299,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":118639,"byte_end":118646,"line_start":1344,"line_end":1344,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":119542,"byte_end":119552,"line_start":1373,"line_end":1373,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":119944,"byte_end":119954,"line_start":1384,"line_end":1384,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":128560,"byte_end":128571,"line_start":95,"line_end":95,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":137058,"byte_end":137066,"line_start":358,"line_end":358,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":138524,"byte_end":138533,"line_start":404,"line_end":404,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":139804,"byte_end":139819,"line_start":459,"line_end":459,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":141675,"byte_end":141685,"line_start":511,"line_end":511,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":172165,"byte_end":172174,"line_start":1294,"line_end":1294,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":172594,"byte_end":172604,"line_start":1308,"line_end":1308,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":173188,"byte_end":173198,"line_start":1332,"line_end":1332,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\encoder.rs","byte_start":174683,"byte_end":174693,"line_start":15,"line_end":15,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":186619,"byte_end":186629,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":187588,"byte_end":187598,"line_start":67,"line_end":67,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":189246,"byte_end":189256,"line_start":113,"line_end":113,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":190417,"byte_end":190427,"line_start":152,"line_end":152,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":191385,"byte_end":191394,"line_start":182,"line_end":182,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":191662,"byte_end":191672,"line_start":194,"line_end":194,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":215310,"byte_end":215317,"line_start":52,"line_end":52,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":215733,"byte_end":215742,"line_start":66,"line_end":66,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":216155,"byte_end":216162,"line_start":80,"line_end":80,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":217156,"byte_end":217172,"line_start":122,"line_end":122,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":219232,"byte_end":219248,"line_start":176,"line_end":176,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":222217,"byte_end":222224,"line_start":256,"line_end":256,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":222487,"byte_end":222494,"line_start":268,"line_end":268,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":224722,"byte_end":224732,"line_start":330,"line_end":330,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":225949,"byte_end":225959,"line_start":25,"line_end":25,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":227370,"byte_end":227379,"line_start":72,"line_end":72,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":227795,"byte_end":227805,"line_start":86,"line_end":86,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":228417,"byte_end":228427,"line_start":111,"line_end":111,"column_start":58,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":229671,"byte_end":229681,"line_start":161,"line_end":161,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":231963,"byte_end":231973,"line_start":226,"line_end":226,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":237717,"byte_end":237727,"line_start":378,"line_end":378,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":238627,"byte_end":238650,"line_start":406,"line_end":406,"column_start":18,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":238943,"byte_end":238966,"line_start":419,"line_end":419,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":240673,"byte_end":240696,"line_start":468,"line_end":468,"column_start":40,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":247419,"byte_end":247430,"line_start":653,"line_end":653,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1049},{"krate":0,"index":1050}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":254102,"byte_end":254108,"line_start":824,"line_end":824,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1059}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":254392,"byte_end":254398,"line_start":832,"line_end":832,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":258115,"byte_end":258125,"line_start":10,"line_end":10,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1091},{"krate":0,"index":1092}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":260877,"byte_end":260888,"line_start":91,"line_end":91,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":261014,"byte_end":261025,"line_start":97,"line_end":97,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1107},{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":261726,"byte_end":261746,"line_start":126,"line_end":126,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":262005,"byte_end":262025,"line_start":136,"line_end":136,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1119},{"krate":0,"index":1120}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\decoder.rs","byte_start":274499,"byte_end":274509,"line_start":42,"line_end":42,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1167}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\decoder.rs","byte_start":276928,"byte_end":276936,"line_start":117,"line_end":117,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1180},{"krate":0,"index":1183}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\decoder.rs","byte_start":278249,"byte_end":278258,"line_start":165,"line_end":165,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1192},{"krate":0,"index":1193}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\decoder.rs","byte_start":278678,"byte_end":278688,"line_start":179,"line_end":179,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\encoder.rs","byte_start":283510,"byte_end":283520,"line_start":20,"line_end":20,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1221},{"krate":0,"index":1222}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","byte_start":286723,"byte_end":286734,"line_start":16,"line_end":16,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1251}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","byte_start":287436,"byte_end":287446,"line_start":38,"line_end":38,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1259},{"krate":0,"index":1260}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","byte_start":287859,"byte_end":287870,"line_start":52,"line_end":52,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","byte_start":289301,"byte_end":289310,"line_start":106,"line_end":106,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1271}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","byte_start":289622,"byte_end":289632,"line_start":117,"line_end":117,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1274}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\encoder.rs","byte_start":295772,"byte_end":295781,"line_start":166,"line_end":166,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\encoder.rs","byte_start":298808,"byte_end":298819,"line_start":289,"line_end":289,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1359}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":324432,"byte_end":324441,"line_start":27,"line_end":27,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1417}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":325170,"byte_end":325179,"line_start":51,"line_end":51,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1420},{"krate":0,"index":1421}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":326445,"byte_end":326455,"line_start":97,"line_end":97,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1428}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":326940,"byte_end":326950,"line_start":111,"line_end":111,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":327766,"byte_end":327776,"line_start":145,"line_end":145,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1443},{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":328485,"byte_end":328494,"line_start":164,"line_end":164,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1447}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":329587,"byte_end":329597,"line_start":194,"line_end":194,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\autobreak.rs","byte_start":335903,"byte_end":335912,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\autobreak.rs","byte_start":337173,"byte_end":337182,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1485},{"krate":0,"index":1486}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\autobreak.rs","byte_start":337808,"byte_end":337817,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1489}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":340208,"byte_end":340218,"line_start":52,"line_end":52,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1548},{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":353409,"byte_end":353418,"line_start":409,"line_end":409,"column_start":32,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":353547,"byte_end":353556,"line_start":413,"line_end":413,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1581},{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":353969,"byte_end":353979,"line_start":427,"line_end":427,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1586},{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":354433,"byte_end":354443,"line_start":447,"line_end":447,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1593},{"krate":0,"index":1594},{"krate":0,"index":1597},{"krate":0,"index":1599}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":356125,"byte_end":356134,"line_start":489,"line_end":489,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1601}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":357521,"byte_end":357523,"line_start":532,"line_end":532,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":358223,"byte_end":358226,"line_start":561,"line_end":561,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1617},{"krate":0,"index":1618},{"krate":0,"index":1619}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":359485,"byte_end":359491,"line_start":600,"line_end":600,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1624}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":360995,"byte_end":361000,"line_start":650,"line_end":650,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":361830,"byte_end":361842,"line_start":680,"line_end":680,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1632}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":361967,"byte_end":361980,"line_start":686,"line_end":686,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1634}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":362360,"byte_end":362372,"line_start":698,"line_end":698,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1636}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":362748,"byte_end":362763,"line_start":710,"line_end":710,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1638}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":377507,"byte_end":377517,"line_start":76,"line_end":76,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1715},{"krate":0,"index":1716},{"krate":0,"index":1717}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":384793,"byte_end":384811,"line_start":272,"line_end":272,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1720}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":385936,"byte_end":385951,"line_start":307,"line_end":307,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1725}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":386439,"byte_end":386456,"line_start":324,"line_end":324,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1728}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":389960,"byte_end":389978,"line_start":415,"line_end":415,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1731}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":392109,"byte_end":392122,"line_start":474,"line_end":474,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1734},{"krate":0,"index":1735}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":392432,"byte_end":392444,"line_start":487,"line_end":487,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1742},{"krate":0,"index":1744}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":393861,"byte_end":393872,"line_start":532,"line_end":532,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1748},{"krate":0,"index":1749},{"krate":0,"index":1752}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":395583,"byte_end":395594,"line_start":586,"line_end":586,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1755}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":395713,"byte_end":395724,"line_start":592,"line_end":592,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":395825,"byte_end":395838,"line_start":598,"line_end":598,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1761}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400984,"byte_end":400994,"line_start":136,"line_end":136,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1782},{"krate":0,"index":1784}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":401964,"byte_end":401973,"line_start":161,"line_end":161,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1794}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":408153,"byte_end":408162,"line_start":314,"line_end":314,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1796}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":408355,"byte_end":408364,"line_start":323,"line_end":323,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1798}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":408558,"byte_end":408567,"line_start":332,"line_end":332,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1800}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":408762,"byte_end":408771,"line_start":341,"line_end":341,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1802}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":409675,"byte_end":409684,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1844},{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1847}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":411529,"byte_end":411535,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1849},{"krate":0,"index":1850}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":412804,"byte_end":412812,"line_start":129,"line_end":129,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1856},{"krate":0,"index":1857}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":413915,"byte_end":413925,"line_start":175,"line_end":175,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1875},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1878},{"krate":0,"index":1879},{"krate":0,"index":1881},{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1888}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":425472,"byte_end":425482,"line_start":501,"line_end":501,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1892},{"krate":0,"index":1893},{"krate":0,"index":1894},{"krate":0,"index":1895},{"krate":0,"index":1896},{"krate":0,"index":1897}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":426320,"byte_end":426329,"line_start":536,"line_end":536,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":427197,"byte_end":427208,"line_start":28,"line_end":28,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1929}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":427631,"byte_end":427641,"line_start":45,"line_end":45,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1931}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":428110,"byte_end":428119,"line_start":56,"line_end":56,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1933}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":428733,"byte_end":428743,"line_start":71,"line_end":71,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1941},{"krate":0,"index":1942}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":429163,"byte_end":429174,"line_start":85,"line_end":85,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949},{"krate":0,"index":1950}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":429865,"byte_end":429876,"line_start":113,"line_end":113,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1956},{"krate":0,"index":1957}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\decoder.rs","byte_start":431447,"byte_end":431458,"line_start":24,"line_end":24,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\decoder.rs","byte_start":433636,"byte_end":433646,"line_start":104,"line_end":104,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1996},{"krate":0,"index":1997}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\decoder.rs","byte_start":434059,"byte_end":434070,"line_start":118,"line_end":118,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2005}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":462852,"byte_end":462862,"line_start":674,"line_end":674,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101},{"krate":0,"index":2102},{"krate":0,"index":2103},{"krate":0,"index":2104},{"krate":0,"index":2105}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":467215,"byte_end":467225,"line_start":870,"line_end":870,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2131},{"krate":0,"index":2134},{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":2139},{"krate":0,"index":2140},{"krate":0,"index":2141},{"krate":0,"index":2143},{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2153}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":488215,"byte_end":488223,"line_start":1521,"line_end":1521,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2156},{"krate":0,"index":2157}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":488840,"byte_end":488848,"line_start":1544,"line_end":1544,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2159}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":488913,"byte_end":488923,"line_start":1550,"line_end":1550,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2161}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":489212,"byte_end":489222,"line_start":1562,"line_end":1562,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2163}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":489289,"byte_end":489298,"line_start":1568,"line_end":1568,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2165}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":489835,"byte_end":489844,"line_start":1586,"line_end":1586,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2167}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":504514,"byte_end":504520,"line_start":13,"line_end":13,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2204},{"krate":0,"index":2205}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":505111,"byte_end":505117,"line_start":29,"line_end":29,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2208},{"krate":0,"index":2209}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":505473,"byte_end":505478,"line_start":48,"line_end":48,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2211},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2216},{"krate":0,"index":2217}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":512329,"byte_end":512335,"line_start":178,"line_end":178,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2302},{"krate":0,"index":2303}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":512579,"byte_end":512585,"line_start":190,"line_end":190,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2308}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":512734,"byte_end":512740,"line_start":199,"line_end":199,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2312}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":513110,"byte_end":513119,"line_start":217,"line_end":217,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2321},{"krate":0,"index":2322}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":513375,"byte_end":513384,"line_start":229,"line_end":229,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2327}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":513533,"byte_end":513542,"line_start":238,"line_end":238,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2331}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":513946,"byte_end":513950,"line_start":258,"line_end":258,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2340},{"krate":0,"index":2341}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":514273,"byte_end":514277,"line_start":272,"line_end":272,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2346}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":514426,"byte_end":514430,"line_start":281,"line_end":281,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2350}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":514885,"byte_end":514892,"line_start":301,"line_end":301,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2359},{"krate":0,"index":2360}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":515228,"byte_end":515235,"line_start":315,"line_end":315,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2365}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":515384,"byte_end":515391,"line_start":324,"line_end":324,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2369}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":515887,"byte_end":515902,"line_start":347,"line_end":347,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2381},{"krate":0,"index":2382}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":516305,"byte_end":516320,"line_start":365,"line_end":365,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2387}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":516632,"byte_end":516645,"line_start":384,"line_end":384,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2397},{"krate":0,"index":2398}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":517183,"byte_end":517196,"line_start":408,"line_end":408,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2403}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":517532,"byte_end":517550,"line_start":428,"line_end":428,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2414},{"krate":0,"index":2415}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":517961,"byte_end":517979,"line_start":446,"line_end":446,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2420}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":518297,"byte_end":518313,"line_start":465,"line_end":465,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2430},{"krate":0,"index":2431}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":518860,"byte_end":518876,"line_start":489,"line_end":489,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2436}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":519378,"byte_end":519389,"line_start":511,"line_end":511,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2440},{"krate":0,"index":2441},{"krate":0,"index":2442},{"krate":0,"index":2443},{"krate":0,"index":2444},{"krate":0,"index":2445},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2448},{"krate":0,"index":2449},{"krate":0,"index":2450},{"krate":0,"index":2452},{"krate":0,"index":2455},{"krate":0,"index":2456},{"krate":0,"index":2457},{"krate":0,"index":2458},{"krate":0,"index":2459}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":525032,"byte_end":525043,"line_start":678,"line_end":678,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2463},{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2466},{"krate":0,"index":2467},{"krate":0,"index":2468}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":527213,"byte_end":527224,"line_start":747,"line_end":747,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2472}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":527834,"byte_end":527845,"line_start":771,"line_end":771,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2477}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":528546,"byte_end":528557,"line_start":797,"line_end":797,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2482},{"krate":0,"index":2483}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":528821,"byte_end":528832,"line_start":810,"line_end":810,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2487}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":529098,"byte_end":529109,"line_start":821,"line_end":821,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2491},{"krate":0,"index":2492}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":529380,"byte_end":529391,"line_start":834,"line_end":834,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2496}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":529652,"byte_end":529663,"line_start":845,"line_end":845,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2500}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":530022,"byte_end":530033,"line_start":860,"line_end":860,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":530857,"byte_end":530868,"line_start":893,"line_end":893,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2514},{"krate":0,"index":2515},{"krate":0,"index":2516},{"krate":0,"index":2517},{"krate":0,"index":2518},{"krate":0,"index":2519}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":532322,"byte_end":532333,"line_start":935,"line_end":935,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2522},{"krate":0,"index":2523},{"krate":0,"index":2524},{"krate":0,"index":2526},{"krate":0,"index":2527}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":534767,"byte_end":534776,"line_start":1013,"line_end":1013,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2532}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":536174,"byte_end":536185,"line_start":1051,"line_end":1051,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":2540}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":546866,"byte_end":546867,"line_start":234,"line_end":234,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2565}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":547023,"byte_end":547027,"line_start":242,"line_end":242,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2568}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":547406,"byte_end":547410,"line_start":252,"line_end":252,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2571}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":547792,"byte_end":547796,"line_start":262,"line_end":262,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2574}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":548174,"byte_end":548178,"line_start":273,"line_end":273,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2577}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":548558,"byte_end":548562,"line_start":284,"line_end":284,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2580}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":548757,"byte_end":548762,"line_start":292,"line_end":292,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2583}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":549179,"byte_end":549184,"line_start":303,"line_end":303,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2586}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":549600,"byte_end":549605,"line_start":314,"line_end":314,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2589}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":550023,"byte_end":550028,"line_start":325,"line_end":325,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2592}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":550447,"byte_end":550452,"line_start":336,"line_end":336,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2595}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":550711,"byte_end":550715,"line_start":346,"line_end":346,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2598}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":551016,"byte_end":551020,"line_start":357,"line_end":357,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2601}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":551322,"byte_end":551326,"line_start":368,"line_end":368,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2604}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":551628,"byte_end":551632,"line_start":380,"line_end":380,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2607}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":551935,"byte_end":551939,"line_start":393,"line_end":393,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2610}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":552264,"byte_end":552268,"line_start":407,"line_end":407,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2613}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":552570,"byte_end":552574,"line_start":419,"line_end":419,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2616}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":552877,"byte_end":552881,"line_start":431,"line_end":431,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2619}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":553182,"byte_end":553186,"line_start":442,"line_end":442,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2622}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":553487,"byte_end":553491,"line_start":453,"line_end":453,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2625}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":553817,"byte_end":553820,"line_start":468,"line_end":468,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2628}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":554090,"byte_end":554093,"line_start":479,"line_end":479,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2631}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":554361,"byte_end":554364,"line_start":489,"line_end":489,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2634}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":554629,"byte_end":554632,"line_start":499,"line_end":499,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2637}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":554896,"byte_end":554899,"line_start":509,"line_end":509,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2640}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":555185,"byte_end":555188,"line_start":521,"line_end":521,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2643}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":555456,"byte_end":555459,"line_start":531,"line_end":531,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2646}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":555724,"byte_end":555727,"line_start":542,"line_end":542,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2649}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":555997,"byte_end":556000,"line_start":552,"line_end":552,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2652}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":556264,"byte_end":556267,"line_start":562,"line_end":562,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2655}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":556636,"byte_end":556641,"line_start":579,"line_end":579,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2660}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":557646,"byte_end":557650,"line_start":612,"line_end":612,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2663}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":557760,"byte_end":557764,"line_start":618,"line_end":618,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2666}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":559972,"byte_end":559976,"line_start":676,"line_end":676,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2669}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":562182,"byte_end":562185,"line_start":732,"line_end":732,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2672}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":562294,"byte_end":562297,"line_start":738,"line_end":738,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2675}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":562509,"byte_end":562514,"line_start":751,"line_end":751,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2680}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":562687,"byte_end":562691,"line_start":760,"line_end":760,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2683}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":562879,"byte_end":562883,"line_start":771,"line_end":771,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2686}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":563096,"byte_end":563100,"line_start":782,"line_end":782,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2689}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":563313,"byte_end":563316,"line_start":793,"line_end":793,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2692}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":563578,"byte_end":563581,"line_start":807,"line_end":807,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2695}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":572280,"byte_end":572292,"line_start":105,"line_end":105,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2741},{"krate":0,"index":2742},{"krate":0,"index":2743},{"krate":0,"index":2744},{"krate":0,"index":2745},{"krate":0,"index":2746},{"krate":0,"index":2747},{"krate":0,"index":2748},{"krate":0,"index":2749},{"krate":0,"index":2750},{"krate":0,"index":2751},{"krate":0,"index":2752},{"krate":0,"index":2753},{"krate":0,"index":2754},{"krate":0,"index":2755},{"krate":0,"index":2756},{"krate":0,"index":2757},{"krate":0,"index":2758},{"krate":0,"index":2759},{"krate":0,"index":2760},{"krate":0,"index":2761},{"krate":0,"index":2762},{"krate":0,"index":2763},{"krate":0,"index":2764},{"krate":0,"index":2765},{"krate":0,"index":2766},{"krate":0,"index":2767},{"krate":0,"index":2768},{"krate":0,"index":2769},{"krate":0,"index":2770},{"krate":0,"index":2771},{"krate":0,"index":2772},{"krate":0,"index":2773},{"krate":0,"index":2774},{"krate":0,"index":2775},{"krate":0,"index":2776},{"krate":0,"index":2777},{"krate":0,"index":2778},{"krate":0,"index":2779},{"krate":0,"index":2780},{"krate":0,"index":2781},{"krate":0,"index":2782},{"krate":0,"index":2783},{"krate":0,"index":2784},{"krate":0,"index":2785},{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2790},{"krate":0,"index":2792}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":589294,"byte_end":589306,"line_start":584,"line_end":584,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2795},{"krate":0,"index":2796},{"krate":0,"index":2797},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2800}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":589826,"byte_end":589838,"line_start":606,"line_end":606,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2802},{"krate":0,"index":2803},{"krate":0,"index":2804},{"krate":0,"index":2805},{"krate":0,"index":2806}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":611564,"byte_end":611574,"line_start":45,"line_end":45,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2856}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":612783,"byte_end":612793,"line_start":78,"line_end":78,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2858},{"krate":0,"index":2859}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":613542,"byte_end":613552,"line_start":100,"line_end":100,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2861}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":615254,"byte_end":615271,"line_start":177,"line_end":177,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2865}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":616406,"byte_end":616421,"line_start":211,"line_end":211,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2873},{"krate":0,"index":2874}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":626290,"byte_end":626296,"line_start":477,"line_end":477,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2916},{"krate":0,"index":2917}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":632292,"byte_end":632300,"line_start":667,"line_end":667,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2954},{"krate":0,"index":2955},{"krate":0,"index":2956}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":633437,"byte_end":633445,"line_start":708,"line_end":708,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2959},{"krate":0,"index":2960},{"krate":0,"index":2961},{"krate":0,"index":2962},{"krate":0,"index":2963},{"krate":0,"index":2964},{"krate":0,"index":2965}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":634266,"byte_end":634274,"line_start":740,"line_end":740,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2968},{"krate":0,"index":2969},{"krate":0,"index":2970},{"krate":0,"index":2971},{"krate":0,"index":2972},{"krate":0,"index":2973}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2007,"byte_end":2011,"line_start":72,"line_end":72,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":93}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\mod.rs","byte_start":3467,"byte_end":3469,"line_start":2,"line_end":2,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":94}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\mod.rs","byte_start":3479,"byte_end":3484,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":132}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2052,"byte_end":2060,"line_start":75,"line_end":75,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":135}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\mod.rs","byte_start":18979,"byte_end":18987,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":186}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2106,"byte_end":2110,"line_start":78,"line_end":78,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":344}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2161,"byte_end":2164,"line_start":82,"line_end":82,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":501}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2198,"byte_end":2201,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":720}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2241,"byte_end":2244,"line_start":86,"line_end":86,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":832}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2278,"byte_end":2281,"line_start":88,"line_end":88,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":924}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2315,"byte_end":2318,"line_start":90,"line_end":90,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1128}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2353,"byte_end":2357,"line_start":92,"line_end":92,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1229}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2397,"byte_end":2400,"line_start":94,"line_end":94,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1399}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2434,"byte_end":2437,"line_start":96,"line_end":96,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1455}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2471,"byte_end":2474,"line_start":98,"line_end":98,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1803}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2509,"byte_end":2513,"line_start":100,"line_end":100,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1906}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src/lib.rs","byte_start":2548,"byte_end":2552,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1958}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\mod.rs","byte_start":430943,"byte_end":430946,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2012}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\math\\nq.rs","byte_start":5933,"byte_end":5941,"line_start":73,"line_end":73,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":37179,"byte_end":37186,"line_start":194,"line_end":194,"column_start":19,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3027},"to":{"krate":0,"index":225}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\colorops.rs","byte_start":37630,"byte_end":37638,"line_start":215,"line_end":215,"column_start":23,"column_end":31},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":110},"to":{"krate":0,"index":225}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\imageops\\sample.rs","byte_start":50148,"byte_end":50160,"line_start":298,"line_end":298,"column_start":34,"column_end":46},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":70230,"byte_end":70242,"line_start":108,"line_end":108,"column_start":6,"column_end":18},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3059},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":82874,"byte_end":82877,"line_start":421,"line_end":421,"column_start":6,"column_end":9},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":83135,"byte_end":83146,"line_start":436,"line_end":436,"column_start":14,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3048},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":104904,"byte_end":104908,"line_start":971,"line_end":971,"column_start":24,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3105},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":110479,"byte_end":110486,"line_start":1103,"line_end":1103,"column_start":24,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":114863,"byte_end":114874,"line_start":1217,"line_end":1217,"column_start":40,"column_end":51},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3048},"to":{"krate":2,"index":1626}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":115483,"byte_end":115494,"line_start":1236,"line_end":1236,"column_start":43,"column_end":54},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3048},"to":{"krate":2,"index":1630}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":116098,"byte_end":116102,"line_start":1254,"line_end":1254,"column_start":45,"column_end":49},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3105},"to":{"krate":0,"index":2918}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":117357,"byte_end":117364,"line_start":1299,"line_end":1299,"column_start":45,"column_end":52},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3118},"to":{"krate":0,"index":2918}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":118639,"byte_end":118646,"line_start":1344,"line_end":1344,"column_start":41,"column_end":48},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3118},"to":{"krate":0,"index":2931}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":119542,"byte_end":119552,"line_start":1373,"line_end":1373,"column_start":22,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":4108},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\flat.rs","byte_start":119944,"byte_end":119954,"line_start":1384,"line_end":1384,"column_start":21,"column_end":31},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3153},"to":{"krate":2,"index":1916}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":128560,"byte_end":128571,"line_start":95,"line_end":95,"column_start":23,"column_end":34},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":560},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":137058,"byte_end":137066,"line_start":358,"line_end":358,"column_start":6,"column_end":14},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":138524,"byte_end":138533,"line_start":404,"line_end":404,"column_start":6,"column_end":15},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":139804,"byte_end":139819,"line_start":459,"line_end":459,"column_start":32,"column_end":47},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":630},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":141675,"byte_end":141685,"line_start":511,"line_end":511,"column_start":22,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":597},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":172165,"byte_end":172174,"line_start":1294,"line_end":1294,"column_start":18,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":670},"to":{"krate":1,"index":2751}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":172594,"byte_end":172604,"line_start":1308,"line_end":1308,"column_start":52,"column_end":62},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":597},"to":{"krate":0,"index":2883}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\decoder.rs","byte_start":173188,"byte_end":173198,"line_start":1332,"line_end":1332,"column_start":55,"column_end":65},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":597},"to":{"krate":0,"index":2896}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\bmp\\encoder.rs","byte_start":174683,"byte_end":174693,"line_start":15,"line_end":15,"column_start":25,"column_end":35},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":186619,"byte_end":186629,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":3249},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":187588,"byte_end":187598,"line_start":67,"line_end":67,"column_start":15,"column_end":25},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":740},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":189246,"byte_end":189256,"line_start":113,"line_end":113,"column_start":45,"column_end":55},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":740},"to":{"krate":0,"index":2883}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":190417,"byte_end":190427,"line_start":152,"line_end":152,"column_start":55,"column_end":65},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":740},"to":{"krate":0,"index":2896}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":191385,"byte_end":191394,"line_start":182,"line_end":182,"column_start":24,"column_end":33},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":767},"to":{"krate":1,"index":2751}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dxt.rs","byte_start":191662,"byte_end":191672,"line_start":194,"line_end":194,"column_start":16,"column_end":26},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":775},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":215310,"byte_end":215317,"line_start":52,"line_end":52,"column_start":15,"column_end":22},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":861},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":215733,"byte_end":215742,"line_start":66,"line_end":66,"column_start":18,"column_end":27},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":867},"to":{"krate":1,"index":2751}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":216155,"byte_end":216162,"line_start":80,"line_end":80,"column_start":45,"column_end":52},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":861},"to":{"krate":0,"index":2883}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":217156,"byte_end":217172,"line_start":122,"line_end":122,"column_start":15,"column_end":31},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":219232,"byte_end":219248,"line_start":176,"line_end":176,"column_start":28,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":884},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":222217,"byte_end":222224,"line_start":256,"line_end":256,"column_start":49,"column_end":56},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":861},"to":{"krate":0,"index":2902}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":222487,"byte_end":222494,"line_start":268,"line_end":268,"column_start":16,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":906},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\gif.rs","byte_start":224722,"byte_end":224732,"line_start":330,"line_end":330,"column_start":35,"column_end":45},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":4108},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":225949,"byte_end":225959,"line_start":25,"line_end":25,"column_start":18,"column_end":28},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":3265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":227370,"byte_end":227379,"line_start":72,"line_end":72,"column_start":18,"column_end":27},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":957},"to":{"krate":1,"index":2751}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":227795,"byte_end":227805,"line_start":86,"line_end":86,"column_start":48,"column_end":58},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3265},"to":{"krate":0,"index":2883}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":228417,"byte_end":228427,"line_start":111,"line_end":111,"column_start":58,"column_end":68},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3265},"to":{"krate":0,"index":2896}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":229671,"byte_end":229681,"line_start":161,"line_end":161,"column_start":6,"column_end":16},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":231963,"byte_end":231973,"line_start":226,"line_end":226,"column_start":18,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3273},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":237717,"byte_end":237727,"line_start":378,"line_end":378,"column_start":35,"column_end":45},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3273},"to":{"krate":2,"index":3333}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":238627,"byte_end":238650,"line_start":406,"line_end":406,"column_start":18,"column_end":41},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1011},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":238943,"byte_end":238966,"line_start":419,"line_end":419,"column_start":31,"column_end":54},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1011},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":240673,"byte_end":240696,"line_start":468,"line_end":468,"column_start":40,"column_end":63},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1011},"to":{"krate":2,"index":3321}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":247419,"byte_end":247430,"line_start":653,"line_end":653,"column_start":6,"column_end":17},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":254102,"byte_end":254108,"line_start":824,"line_end":824,"column_start":46,"column_end":52},"kind":{"Impl":{"id":50}},"from":{"krate":2,"index":32810},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\decoder.rs","byte_start":254392,"byte_end":254398,"line_start":832,"line_end":832,"column_start":46,"column_end":52},"kind":{"Impl":{"id":51}},"from":{"krate":2,"index":32810},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":258115,"byte_end":258125,"line_start":10,"line_end":10,"column_start":16,"column_end":26},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":260877,"byte_end":260888,"line_start":91,"line_end":91,"column_start":10,"column_end":21},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1098},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":261014,"byte_end":261025,"line_start":97,"line_end":97,"column_start":23,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1098},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":261726,"byte_end":261746,"line_start":126,"line_end":126,"column_start":10,"column_end":30},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\hdr\\encoder.rs","byte_start":262005,"byte_end":262025,"line_start":136,"line_end":136,"column_start":23,"column_end":43},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1110},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\decoder.rs","byte_start":274499,"byte_end":274509,"line_start":42,"line_end":42,"column_start":22,"column_end":32},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1153},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\decoder.rs","byte_start":276928,"byte_end":276936,"line_start":117,"line_end":117,"column_start":6,"column_end":14},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\decoder.rs","byte_start":278249,"byte_end":278258,"line_start":165,"line_end":165,"column_start":18,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1185},"to":{"krate":1,"index":2751}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\decoder.rs","byte_start":278678,"byte_end":278688,"line_start":179,"line_end":179,"column_start":52,"column_end":62},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1153},"to":{"krate":0,"index":2883}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\ico\\encoder.rs","byte_start":283510,"byte_end":283520,"line_start":20,"line_end":20,"column_start":16,"column_end":26},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","byte_start":286723,"byte_end":286734,"line_start":16,"line_end":16,"column_start":15,"column_end":26},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","byte_start":287436,"byte_end":287446,"line_start":38,"line_end":38,"column_start":18,"column_end":28},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1252},"to":{"krate":1,"index":2751}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","byte_start":287859,"byte_end":287870,"line_start":52,"line_end":52,"column_start":45,"column_end":56},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1245},"to":{"krate":0,"index":2883}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","byte_start":289301,"byte_end":289310,"line_start":106,"line_end":106,"column_start":42,"column_end":51},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3650},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\decoder.rs","byte_start":289622,"byte_end":289632,"line_start":117,"line_end":117,"column_start":36,"column_end":46},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":4108},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\encoder.rs","byte_start":295772,"byte_end":295781,"line_start":166,"line_end":166,"column_start":25,"column_end":34},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\jpeg\\encoder.rs","byte_start":298808,"byte_end":298819,"line_start":289,"line_end":289,"column_start":20,"column_end":31},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1339},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":324432,"byte_end":324441,"line_start":27,"line_end":27,"column_start":15,"column_end":24},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":325170,"byte_end":325179,"line_start":51,"line_end":51,"column_start":24,"column_end":33},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1410},"to":{"krate":1,"index":2751}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":326445,"byte_end":326455,"line_start":97,"line_end":97,"column_start":15,"column_end":25},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1422},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":326940,"byte_end":326950,"line_start":111,"line_end":111,"column_start":45,"column_end":55},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1422},"to":{"krate":0,"index":2883}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":327766,"byte_end":327776,"line_start":145,"line_end":145,"column_start":16,"column_end":26},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":328485,"byte_end":328494,"line_start":164,"line_end":164,"column_start":48,"column_end":57},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":3650},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\png.rs","byte_start":329587,"byte_end":329597,"line_start":194,"line_end":194,"column_start":35,"column_end":45},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":4108},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\autobreak.rs","byte_start":335903,"byte_end":335912,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1472},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\autobreak.rs","byte_start":337173,"byte_end":337182,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1472},"to":{"krate":1,"index":2801}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\autobreak.rs","byte_start":337808,"byte_end":337817,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1472},"to":{"krate":2,"index":1572}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":340208,"byte_end":340218,"line_start":52,"line_end":52,"column_start":15,"column_end":25},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":343665,"byte_end":343672,"line_start":152,"line_end":152,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2823},"to":{"krate":0,"index":1550}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":353409,"byte_end":353418,"line_start":409,"line_end":409,"column_start":32,"column_end":41},"kind":{"Impl":{"id":80}},"from":{"krate":1,"index":2215},"to":{"krate":0,"index":1550}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":353547,"byte_end":353556,"line_start":413,"line_end":413,"column_start":18,"column_end":27},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1574},"to":{"krate":1,"index":2751}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":353969,"byte_end":353979,"line_start":427,"line_end":427,"column_start":45,"column_end":55},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1537},"to":{"krate":0,"index":2883}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":354433,"byte_end":354443,"line_start":447,"line_end":447,"column_start":15,"column_end":25},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":356125,"byte_end":356134,"line_start":489,"line_end":489,"column_start":6,"column_end":15},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3359},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":357521,"byte_end":357523,"line_start":532,"line_end":532,"column_start":17,"column_end":19},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1527},"to":{"krate":0,"index":1523}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":358223,"byte_end":358226,"line_start":561,"line_end":561,"column_start":17,"column_end":20},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1529},"to":{"krate":0,"index":1523}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":359485,"byte_end":359491,"line_start":600,"line_end":600,"column_start":17,"column_end":23},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1531},"to":{"krate":0,"index":1523}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":360995,"byte_end":361000,"line_start":650,"line_end":650,"column_start":17,"column_end":22},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1533},"to":{"krate":0,"index":1523}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":361830,"byte_end":361842,"line_start":680,"line_end":680,"column_start":31,"column_end":43},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":3424},"to":{"krate":0,"index":1535}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":361967,"byte_end":361980,"line_start":686,"line_end":686,"column_start":31,"column_end":44},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":3433},"to":{"krate":0,"index":1535}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":362360,"byte_end":362372,"line_start":698,"line_end":698,"column_start":31,"column_end":43},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":3443},"to":{"krate":0,"index":1535}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\decoder.rs","byte_start":362748,"byte_end":362763,"line_start":710,"line_end":710,"column_start":31,"column_end":46},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":3453},"to":{"krate":0,"index":1535}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":377507,"byte_end":377517,"line_start":76,"line_end":76,"column_start":16,"column_end":26},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1670},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":384793,"byte_end":384811,"line_start":272,"line_end":272,"column_start":10,"column_end":28},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1674},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":385936,"byte_end":385951,"line_start":307,"line_end":307,"column_start":10,"column_end":25},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1680},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":386439,"byte_end":386456,"line_start":324,"line_end":324,"column_start":10,"column_end":27},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":389960,"byte_end":389978,"line_start":415,"line_end":415,"column_start":10,"column_end":28},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":392109,"byte_end":392122,"line_start":474,"line_end":474,"column_start":10,"column_end":23},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":392432,"byte_end":392444,"line_start":487,"line_end":487,"column_start":10,"column_end":22},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":393861,"byte_end":393872,"line_start":532,"line_end":532,"column_start":10,"column_end":21},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":3375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":395583,"byte_end":395594,"line_start":586,"line_end":586,"column_start":29,"column_end":40},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":3375},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":395713,"byte_end":395724,"line_start":592,"line_end":592,"column_start":30,"column_end":41},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":3375},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\encoder.rs","byte_start":395825,"byte_end":395838,"line_start":598,"line_end":598,"column_start":10,"column_end":23},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1697},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":400984,"byte_end":400994,"line_start":136,"line_end":136,"column_start":6,"column_end":16},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":3402},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":401964,"byte_end":401973,"line_start":161,"line_end":161,"column_start":6,"column_end":15},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":408153,"byte_end":408162,"line_start":314,"line_end":314,"column_start":29,"column_end":38},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1765},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":408355,"byte_end":408364,"line_start":323,"line_end":323,"column_start":30,"column_end":39},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1765},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":408558,"byte_end":408567,"line_start":332,"line_end":332,"column_start":29,"column_end":38},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1765},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\pnm\\header.rs","byte_start":408762,"byte_end":408771,"line_start":341,"line_end":341,"column_start":32,"column_end":41},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1765},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":409675,"byte_end":409684,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":411529,"byte_end":411535,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":3483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":412804,"byte_end":412812,"line_start":129,"line_end":129,"column_start":6,"column_end":14},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1851},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":413915,"byte_end":413925,"line_start":175,"line_end":175,"column_start":22,"column_end":32},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":425472,"byte_end":425482,"line_start":501,"line_end":501,"column_start":52,"column_end":62},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1858},"to":{"krate":0,"index":2883}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tga\\decoder.rs","byte_start":426320,"byte_end":426329,"line_start":536,"line_end":536,"column_start":31,"column_end":40},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1898},"to":{"krate":1,"index":2751}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":427197,"byte_end":427208,"line_start":28,"line_end":28,"column_start":9,"column_end":20},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1922},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":427631,"byte_end":427641,"line_start":45,"line_end":45,"column_start":32,"column_end":42},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":4108},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":428110,"byte_end":428119,"line_start":56,"line_end":56,"column_start":32,"column_end":41},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":3650},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":428733,"byte_end":428743,"line_start":71,"line_end":71,"column_start":18,"column_end":28},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1934},"to":{"krate":1,"index":2751}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":429163,"byte_end":429174,"line_start":85,"line_end":85,"column_start":52,"column_end":63},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1922},"to":{"krate":0,"index":2883}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\tiff.rs","byte_start":429865,"byte_end":429876,"line_start":113,"line_end":113,"column_start":23,"column_end":34},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\decoder.rs","byte_start":431447,"byte_end":431458,"line_start":24,"line_end":24,"column_start":15,"column_end":26},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\decoder.rs","byte_start":433636,"byte_end":433646,"line_start":104,"line_end":104,"column_start":18,"column_end":28},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1989},"to":{"krate":1,"index":2751}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\decoder.rs","byte_start":434059,"byte_end":434070,"line_start":118,"line_end":118,"column_start":45,"column_end":56},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1977},"to":{"krate":0,"index":2883}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":462852,"byte_end":462862,"line_start":674,"line_end":674,"column_start":6,"column_end":16},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":467215,"byte_end":467225,"line_start":870,"line_end":870,"column_start":15,"column_end":25},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":488215,"byte_end":488223,"line_start":1521,"line_end":1521,"column_start":6,"column_end":14},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":3498},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":488840,"byte_end":488848,"line_start":1544,"line_end":1544,"column_start":18,"column_end":26},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":3498},"to":{"krate":2,"index":2026}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":488913,"byte_end":488923,"line_start":1550,"line_end":1550,"column_start":6,"column_end":16},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":3523},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":489212,"byte_end":489222,"line_start":1562,"line_end":1562,"column_start":18,"column_end":28},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":3523},"to":{"krate":2,"index":2026}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":489289,"byte_end":489298,"line_start":1568,"line_end":1568,"column_start":6,"column_end":15},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3545},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\webp\\vp8.rs","byte_start":489835,"byte_end":489844,"line_start":1586,"line_end":1586,"column_start":18,"column_end":27},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3545},"to":{"krate":2,"index":2026}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":504514,"byte_end":504520,"line_start":13,"line_end":13,"column_start":10,"column_end":16},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2199},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":505111,"byte_end":505117,"line_start":29,"line_end":29,"column_start":23,"column_end":29},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2199},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\animation.rs","byte_start":505473,"byte_end":505478,"line_start":48,"line_end":48,"column_start":6,"column_end":11},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":506978,"byte_end":506982,"line_start":18,"line_end":18,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1394},"to":{"krate":0,"index":2253}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":506985,"byte_end":506990,"line_start":18,"line_end":18,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2002},"to":{"krate":0,"index":2253}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":512329,"byte_end":512335,"line_start":178,"line_end":178,"column_start":38,"column_end":44},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2295},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":512579,"byte_end":512585,"line_start":190,"line_end":190,"column_start":47,"column_end":53},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2295},"to":{"krate":2,"index":3321}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":512734,"byte_end":512740,"line_start":199,"line_end":199,"column_start":49,"column_end":55},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2295},"to":{"krate":2,"index":3301}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":513110,"byte_end":513119,"line_start":217,"line_end":217,"column_start":38,"column_end":47},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2314},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":513375,"byte_end":513384,"line_start":229,"line_end":229,"column_start":47,"column_end":56},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2314},"to":{"krate":2,"index":3321}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":513533,"byte_end":513542,"line_start":238,"line_end":238,"column_start":49,"column_end":58},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2314},"to":{"krate":2,"index":3301}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":513946,"byte_end":513950,"line_start":258,"line_end":258,"column_start":38,"column_end":42},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":2333},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":514273,"byte_end":514277,"line_start":272,"line_end":272,"column_start":47,"column_end":51},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2333},"to":{"krate":2,"index":3321}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":514426,"byte_end":514430,"line_start":281,"line_end":281,"column_start":49,"column_end":53},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":2333},"to":{"krate":2,"index":3301}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":514885,"byte_end":514892,"line_start":301,"line_end":301,"column_start":38,"column_end":45},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":2352},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":515228,"byte_end":515235,"line_start":315,"line_end":315,"column_start":47,"column_end":54},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":2352},"to":{"krate":2,"index":3321}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":515384,"byte_end":515391,"line_start":324,"line_end":324,"column_start":49,"column_end":56},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2352},"to":{"krate":2,"index":3301}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":515887,"byte_end":515902,"line_start":347,"line_end":347,"column_start":38,"column_end":53},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2371},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":516305,"byte_end":516320,"line_start":365,"line_end":365,"column_start":47,"column_end":62},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2371},"to":{"krate":2,"index":3321}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":516632,"byte_end":516645,"line_start":384,"line_end":384,"column_start":38,"column_end":51},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":2388},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":517183,"byte_end":517196,"line_start":408,"line_end":408,"column_start":47,"column_end":60},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":2388},"to":{"krate":2,"index":3321}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":517532,"byte_end":517550,"line_start":428,"line_end":428,"column_start":38,"column_end":56},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":2404},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":517961,"byte_end":517979,"line_start":446,"line_end":446,"column_start":47,"column_end":65},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":2404},"to":{"krate":2,"index":3321}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":518297,"byte_end":518313,"line_start":465,"line_end":465,"column_start":38,"column_end":54},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":2421},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":518860,"byte_end":518876,"line_start":489,"line_end":489,"column_start":47,"column_end":63},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":2421},"to":{"krate":2,"index":3321}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":519378,"byte_end":519389,"line_start":511,"line_end":511,"column_start":20,"column_end":31},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":3639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":525032,"byte_end":525043,"line_start":678,"line_end":678,"column_start":20,"column_end":31},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":3639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":527213,"byte_end":527224,"line_start":747,"line_end":747,"column_start":20,"column_end":31},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":527834,"byte_end":527845,"line_start":771,"line_end":771,"column_start":20,"column_end":31},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":528546,"byte_end":528557,"line_start":797,"line_end":797,"column_start":30,"column_end":41},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3639},"to":{"krate":2,"index":1550}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":528821,"byte_end":528832,"line_start":810,"line_end":810,"column_start":33,"column_end":44},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3639},"to":{"krate":2,"index":1561}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":529098,"byte_end":529109,"line_start":821,"line_end":821,"column_start":42,"column_end":53},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3639},"to":{"krate":2,"index":1626}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":529380,"byte_end":529391,"line_start":834,"line_end":834,"column_start":45,"column_end":56},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3639},"to":{"krate":2,"index":1630}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":529652,"byte_end":529663,"line_start":845,"line_end":845,"column_start":30,"column_end":41},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3639},"to":{"krate":2,"index":2002}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":530022,"byte_end":530033,"line_start":860,"line_end":860,"column_start":41,"column_end":52},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3639},"to":{"krate":0,"index":2918}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":530857,"byte_end":530868,"line_start":893,"line_end":893,"column_start":37,"column_end":48},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3639},"to":{"krate":0,"index":2931}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":532322,"byte_end":532333,"line_start":935,"line_end":935,"column_start":26,"column_end":37},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":534767,"byte_end":534776,"line_start":1013,"line_end":1013,"column_start":6,"column_end":15},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":2543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\buffer.rs","byte_start":536174,"byte_end":536185,"line_start":1051,"line_end":1051,"column_start":67,"column_end":78},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3639},"to":{"krate":0,"index":2528}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":546866,"byte_end":546867,"line_start":234,"line_end":234,"column_start":32,"column_end":33},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":2564},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":547023,"byte_end":547027,"line_start":242,"line_end":242,"column_start":53,"column_end":57},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3987},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":547406,"byte_end":547410,"line_start":252,"line_end":252,"column_start":53,"column_end":57},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":3987},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":547792,"byte_end":547796,"line_start":262,"line_end":262,"column_start":52,"column_end":56},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3987},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":548174,"byte_end":548178,"line_start":273,"line_end":273,"column_start":52,"column_end":56},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3987},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":548558,"byte_end":548562,"line_start":284,"line_end":284,"column_start":54,"column_end":58},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":3987},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":548757,"byte_end":548762,"line_start":292,"line_end":292,"column_start":53,"column_end":58},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":4062},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":549179,"byte_end":549184,"line_start":303,"line_end":303,"column_start":53,"column_end":58},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":4062},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":549600,"byte_end":549605,"line_start":314,"line_end":314,"column_start":52,"column_end":57},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":4062},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":550023,"byte_end":550028,"line_start":325,"line_end":325,"column_start":52,"column_end":57},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":4062},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":550447,"byte_end":550452,"line_start":336,"line_end":336,"column_start":53,"column_end":58},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":4062},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":550711,"byte_end":550715,"line_start":346,"line_end":346,"column_start":52,"column_end":56},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":551016,"byte_end":551020,"line_start":357,"line_end":357,"column_start":52,"column_end":56},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":551322,"byte_end":551326,"line_start":368,"line_end":368,"column_start":53,"column_end":57},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":551628,"byte_end":551632,"line_start":380,"line_end":380,"column_start":54,"column_end":58},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":551935,"byte_end":551939,"line_start":393,"line_end":393,"column_start":53,"column_end":57},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":552264,"byte_end":552268,"line_start":407,"line_end":407,"column_start":52,"column_end":56},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":4037},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":552570,"byte_end":552574,"line_start":419,"line_end":419,"column_start":52,"column_end":56},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":4037},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":552877,"byte_end":552881,"line_start":431,"line_end":431,"column_start":53,"column_end":57},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":4037},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":553182,"byte_end":553186,"line_start":442,"line_end":442,"column_start":54,"column_end":58},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":4037},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":553487,"byte_end":553491,"line_start":453,"line_end":453,"column_start":53,"column_end":57},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":4037},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":553817,"byte_end":553820,"line_start":468,"line_end":468,"column_start":53,"column_end":56},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":3937},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":554090,"byte_end":554093,"line_start":479,"line_end":479,"column_start":53,"column_end":56},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":3937},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":554361,"byte_end":554364,"line_start":489,"line_end":489,"column_start":52,"column_end":55},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":3937},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":554629,"byte_end":554632,"line_start":499,"line_end":499,"column_start":54,"column_end":57},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":3937},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":554896,"byte_end":554899,"line_start":509,"line_end":509,"column_start":53,"column_end":56},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3937},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":555185,"byte_end":555188,"line_start":521,"line_end":521,"column_start":53,"column_end":56},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":3962},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":555456,"byte_end":555459,"line_start":531,"line_end":531,"column_start":52,"column_end":55},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3962},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":555724,"byte_end":555727,"line_start":542,"line_end":542,"column_start":53,"column_end":56},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":3962},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":555997,"byte_end":556000,"line_start":552,"line_end":552,"column_start":54,"column_end":57},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":3962},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":556264,"byte_end":556267,"line_start":562,"line_end":562,"column_start":53,"column_end":56},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":3962},"to":{"krate":0,"index":2560}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":556636,"byte_end":556641,"line_start":579,"line_end":579,"column_start":30,"column_end":35},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":4062},"to":{"krate":0,"index":2656}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":557646,"byte_end":557650,"line_start":612,"line_end":612,"column_start":30,"column_end":34},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":3987},"to":{"krate":0,"index":2656}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":557760,"byte_end":557764,"line_start":618,"line_end":618,"column_start":30,"column_end":34},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":2656}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":559972,"byte_end":559976,"line_start":676,"line_end":676,"column_start":30,"column_end":34},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":4037},"to":{"krate":0,"index":2656}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":562182,"byte_end":562185,"line_start":732,"line_end":732,"column_start":30,"column_end":33},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":3937},"to":{"krate":0,"index":2656}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":562294,"byte_end":562297,"line_start":738,"line_end":738,"column_start":30,"column_end":33},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":3962},"to":{"krate":0,"index":2656}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":562509,"byte_end":562514,"line_start":751,"line_end":751,"column_start":31,"column_end":36},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":4062},"to":{"krate":0,"index":2676}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":562687,"byte_end":562691,"line_start":760,"line_end":760,"column_start":31,"column_end":35},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":3987},"to":{"krate":0,"index":2676}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":562879,"byte_end":562883,"line_start":771,"line_end":771,"column_start":31,"column_end":35},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":2676}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":563096,"byte_end":563100,"line_start":782,"line_end":782,"column_start":31,"column_end":35},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":4037},"to":{"krate":0,"index":2676}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":563313,"byte_end":563316,"line_start":793,"line_end":793,"column_start":31,"column_end":34},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":3937},"to":{"krate":0,"index":2676}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\color.rs","byte_start":563578,"byte_end":563581,"line_start":807,"line_end":807,"column_start":31,"column_end":34},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":3962},"to":{"krate":0,"index":2676}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":572280,"byte_end":572292,"line_start":105,"line_end":105,"column_start":6,"column_end":18},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":4087},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":589294,"byte_end":589306,"line_start":584,"line_end":584,"column_start":27,"column_end":39},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":4087},"to":{"krate":0,"index":2918}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\dynimage.rs","byte_start":589826,"byte_end":589838,"line_start":606,"line_end":606,"column_start":23,"column_end":35},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":4087},"to":{"krate":0,"index":2931}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":611564,"byte_end":611574,"line_start":45,"line_end":45,"column_start":23,"column_end":33},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":4108},"to":{"krate":2,"index":6709}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":612783,"byte_end":612793,"line_start":78,"line_end":78,"column_start":16,"column_end":26},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":4108},"to":{"krate":1,"index":1537}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":613542,"byte_end":613552,"line_start":100,"line_end":100,"column_start":26,"column_end":36},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":4108},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":615254,"byte_end":615271,"line_start":177,"line_end":177,"column_start":28,"column_end":45},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":4161},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":616406,"byte_end":616421,"line_start":211,"line_end":211,"column_start":6,"column_end":21},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":2866},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":622634,"byte_end":622639,"line_start":361,"line_end":361,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1391},"to":{"krate":0,"index":2883}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":625319,"byte_end":625331,"line_start":437,"line_end":437,"column_start":32,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":2883},"to":{"krate":0,"index":2896}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":625338,"byte_end":625343,"line_start":437,"line_end":437,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":1391},"to":{"krate":0,"index":2896}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":626290,"byte_end":626296,"line_start":477,"line_end":477,"column_start":44,"column_end":50},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":2905},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":629185,"byte_end":629201,"line_start":575,"line_end":575,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":2918},"to":{"krate":0,"index":2931}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":632292,"byte_end":632300,"line_start":667,"line_end":667,"column_start":9,"column_end":17},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":2941},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":633437,"byte_end":633445,"line_start":708,"line_end":708,"column_start":30,"column_end":38},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":2941},"to":{"krate":0,"index":2918}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\image.rs","byte_start":634266,"byte_end":634274,"line_start":740,"line_end":740,"column_start":26,"column_end":34},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":2941},"to":{"krate":0,"index":2931}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\traits.rs","byte_start":640612,"byte_end":640616,"line_start":9,"line_end":9,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1394},"to":{"krate":0,"index":2980}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\traits.rs","byte_start":640619,"byte_end":640626,"line_start":9,"line_end":9,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":16,"index":179},"to":{"krate":0,"index":2980}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\traits.rs","byte_start":640629,"byte_end":640632,"line_start":9,"line_end":9,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":16,"index":570},"to":{"krate":0,"index":2980}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\traits.rs","byte_start":640635,"byte_end":640645,"line_start":9,"line_end":9,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1916},"to":{"krate":0,"index":2980}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\traits.rs","byte_start":640654,"byte_end":640659,"line_start":9,"line_end":9,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":2002},"to":{"krate":0,"index":2980}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\traits.rs","byte_start":640662,"byte_end":640669,"line_start":9,"line_end":9,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":16,"index":96},"to":{"krate":0,"index":2980}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\traits.rs","byte_start":641145,"byte_end":641150,"line_start":26,"line_end":26,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1391},"to":{"krate":0,"index":2993}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\traits.rs","byte_start":641153,"byte_end":641160,"line_start":26,"line_end":26,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":16,"index":96},"to":{"krate":0,"index":2993}},{"span":{"file_name":"C:\\Users\\Zimmerle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.1\\./src\\traits.rs","byte_start":641163,"byte_end":641170,"line_start":26,"line_end":26,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":16,"index":179},"to":{"krate":0,"index":2993}}]}